{
  "version": 3,
  "sources": ["../src/modules/TextAnalysisEngine.ts", "../src/modules/BlurModeManager.ts", "../src/modules/ReadingSessionManager.ts", "../src/modules/StorageManager.ts", "../src/content.ts"],
  "sourcesContent": ["/**\r\n * Text Analysis Engine Module\r\n * \r\n * Extracted from complexity-reader and refactored for WebRay-M modular architecture.\r\n * Handles Coleman-Liau Index calculation, content extraction, and page suitability detection.\r\n * \r\n * POTENTIAL WEBRAY-M MODULE CANDIDATE - High reuse potential for reading-focused extensions\r\n */\r\n\r\nexport interface AnalysisResult {\r\n  wordCount: number;\r\n  readingTime: number;\r\n  complexity: ComplexityMetrics;\r\n  url: string;\r\n  title: string;\r\n  timestamp: number;\r\n  textContent: string; // Full extracted text for blur mode\r\n}\r\n\r\nexport interface ComplexityMetrics {\r\n  averageSentenceLength: number;\r\n  averageCharactersPerWord: number; // Note: Coleman-Liau uses characters, not syllables\r\n  complexityScore: 'Simple' | 'Easy' | 'Moderate' | 'Complex' | 'Very Complex' | 'No text';\r\n  readabilityLevel: 'Elementary' | 'Middle School' | 'High School' | 'College' | 'Graduate' | 'N/A';\r\n  colemanLiauIndex: number; // Raw score for debugging\r\n}\r\n\r\n/**\r\n * Coleman-Liau Index Calculator\r\n * \r\n * Character-based readability formula optimized for web content.\r\n * More accurate than Flesch Reading Ease for online text with technical terms and URLs.\r\n */\r\nclass ColemanLiauAnalyzer {\r\n  /**\r\n   * Calculate Coleman-Liau Index\r\n   * Formula: 0.0588 * L - 0.296 * S - 15.8\r\n   * Where L = average characters per 100 words, S = average sentences per 100 words\r\n   */\r\n  calculateIndex(text: string): number {\r\n    const words = this.countWords(text);\r\n    const sentences = this.countSentences(text);\r\n    const characters = this.countCharacters(text);\r\n\r\n    if (words === 0 || sentences === 0) return 0;\r\n\r\n    const L = (characters / words) * 100; // Average characters per 100 words\r\n    const S = (sentences / words) * 100;  // Average sentences per 100 words\r\n    \r\n    const index = 0.0588 * L - 0.296 * S - 15.8;\r\n    return Math.round(index * 10) / 10; // Round to 1 decimal place\r\n  }\r\n\r\n  /**\r\n   * Get complexity classification from Coleman-Liau Index\r\n   */\r\n  getComplexityClassification(index: number): ComplexityMetrics['complexityScore'] {\r\n    if (index <= 6) return 'Simple';\r\n    if (index <= 9) return 'Easy';\r\n    if (index <= 12) return 'Moderate';\r\n    if (index <= 15) return 'Complex';\r\n    return 'Very Complex';\r\n  }\r\n\r\n  /**\r\n   * Get readability level from Coleman-Liau Index\r\n   */\r\n  getReadabilityLevel(index: number): ComplexityMetrics['readabilityLevel'] {\r\n    if (index <= 6) return 'Elementary';\r\n    if (index <= 9) return 'Middle School';\r\n    if (index <= 12) return 'High School';\r\n    if (index <= 15) return 'College';\r\n    return 'Graduate';\r\n  }\r\n\r\n  private countWords(text: string): number {\r\n    // Split by whitespace and filter out empty strings\r\n    const words = text.trim().split(/\\s+/).filter(word => word.length > 0);\r\n    return words.length;\r\n  }\r\n\r\n  private countSentences(text: string): number {\r\n    // Enhanced sentence detection for web content\r\n    // Split by sentence endings, filter out very short segments\r\n    const sentences = text.split(/[.!?]+/).filter(sentence => {\r\n      const trimmed = sentence.trim();\r\n      return trimmed.length > 10; // Minimum meaningful sentence length\r\n    });\r\n    \r\n    return Math.max(1, sentences.length); // Ensure at least 1 sentence\r\n  }\r\n\r\n  private countCharacters(text: string): number {\r\n    // Count only alphanumeric characters (Coleman-Liau standard)\r\n    const alphanumeric = text.match(/[a-zA-Z0-9]/g);\r\n    return alphanumeric ? alphanumeric.length : 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Content Extractor\r\n * \r\n * Intelligently extracts main content from web pages using semantic selectors.\r\n * Prioritizes article content over navigation, ads, and other page elements.\r\n */\r\nclass ContentExtractor {\r\n  private contentSelectors = [\r\n    { selector: 'main', priority: 10 },\r\n    { selector: 'article', priority: 9 },\r\n    { selector: '[role=\"main\"]', priority: 8 },\r\n    // Article-specific selectors\r\n    { selector: '.content', priority: 7 },\r\n    { selector: '.post-content', priority: 7 },\r\n    { selector: '.entry-content', priority: 7 },\r\n    { selector: '.article-content', priority: 7 },\r\n    { selector: '.text-content', priority: 6 },\r\n    { selector: '.main-content', priority: 6 },\r\n    // Generic selectors\r\n    { selector: '#content', priority: 5 },\r\n    { selector: '.container', priority: 3 },\r\n    // Fallback\r\n    { selector: 'body', priority: 1 }\r\n  ];\r\n\r\n  /**\r\n   * Extract main content from current page\r\n   */\r\n  extractMainContent(): { text: string; title: string; element: Element | null } {\r\n    const contentContainer = this.findBestContentContainer();\r\n    \r\n    if (!contentContainer) {\r\n      return {\r\n        text: '',\r\n        title: document.title || 'Untitled',\r\n        element: null\r\n      };\r\n    }\r\n\r\n    const text = this.extractAndCleanText(contentContainer);\r\n    const title = this.extractTitle();\r\n\r\n    return {\r\n      text,\r\n      title,\r\n      element: contentContainer\r\n    };\r\n  }\r\n\r\n  private findBestContentContainer(): Element | null {\r\n    // Try selectors in priority order\r\n    for (const { selector } of this.contentSelectors) {\r\n      const elements = document.querySelectorAll(selector);\r\n      \r\n      for (const element of elements) {\r\n        if (this.isGoodContentContainer(element)) {\r\n          console.log(`\uD83D\uDCDD Using content container: ${selector}`);\r\n          return element;\r\n        }\r\n      }\r\n    }\r\n\r\n    console.warn('\u26A0\uFE0F No suitable content container found, using body');\r\n    return document.body;\r\n  }\r\n\r\n  private isGoodContentContainer(element: Element): boolean {\r\n    const text = element.textContent || '';\r\n    const wordCount = text.trim().split(/\\s+/).length;\r\n    \r\n    // Quality checks\r\n    return (\r\n      wordCount >= 50 && // Minimum content requirement\r\n      !this.isNavigationElement(element) &&\r\n      !this.isFooterElement(element) &&\r\n      this.hasGoodTextDensity(element)\r\n    );\r\n  }\r\n\r\n  private isNavigationElement(element: Element): boolean {\r\n    const tagName = element.tagName.toLowerCase();\r\n    const className = element.className.toLowerCase();\r\n    const role = element.getAttribute('role') || '';\r\n    \r\n    return (\r\n      tagName === 'nav' ||\r\n      role === 'navigation' ||\r\n      className.includes('nav') ||\r\n      className.includes('menu') ||\r\n      className.includes('sidebar')\r\n    );\r\n  }\r\n\r\n  private isFooterElement(element: Element): boolean {\r\n    const tagName = element.tagName.toLowerCase();\r\n    const className = element.className.toLowerCase();\r\n    \r\n    return (\r\n      tagName === 'footer' ||\r\n      className.includes('footer')\r\n    );\r\n  }\r\n\r\n  private hasGoodTextDensity(element: Element): boolean {\r\n    const allElements = element.querySelectorAll('*').length;\r\n    const textLength = (element.textContent || '').length;\r\n    \r\n    // Good text-to-element ratio indicates article content vs UI elements\r\n    return allElements === 0 || (textLength / allElements) > 10;\r\n  }\r\n\r\n  private extractAndCleanText(element: Element): string {\r\n    let text = element.textContent || '';\r\n    \r\n    // Clean and normalize text\r\n    text = text\r\n      .replace(/\\s+/g, ' ')        // Normalize whitespace\r\n      .replace(/\\n+/g, ' ')        // Convert newlines to spaces\r\n      .replace(/\\t+/g, ' ')        // Convert tabs to spaces\r\n      .trim();\r\n    \r\n    return text;\r\n  }\r\n\r\n  private extractTitle(): string {\r\n    // Try multiple title sources in priority order\r\n    const titleSources = [\r\n      () => document.querySelector('h1')?.textContent,\r\n      () => document.querySelector('[role=\"heading\"][aria-level=\"1\"]')?.textContent,\r\n      () => document.querySelector('.article-title')?.textContent,\r\n      () => document.querySelector('.post-title')?.textContent,\r\n      () => document.querySelector('.entry-title')?.textContent,\r\n      () => document.title\r\n    ];\r\n\r\n    for (const getTitle of titleSources) {\r\n      const title = getTitle()?.trim();\r\n      if (title && title.length > 0) {\r\n        return title;\r\n      }\r\n    }\r\n\r\n    return 'Untitled';\r\n  }\r\n}\r\n\r\n/**\r\n * Page Suitability Detector\r\n * \r\n * Determines if a page is suitable for text analysis.\r\n * Filters out video sites, social media, admin panels, etc.\r\n */\r\nclass PageSuitabilityDetector {\r\n  private unsuitableHostnames = [\r\n    // Video and media sites\r\n    'youtube.com', 'www.youtube.com', 'm.youtube.com', 'youtu.be',\r\n    'vimeo.com', 'dailymotion.com', 'twitch.tv', 'www.twitch.tv',\r\n    'netflix.com', 'hulu.com', 'disney.com',\r\n    'spotify.com', 'soundcloud.com', 'bandcamp.com',\r\n    // Social media\r\n    'facebook.com', 'www.facebook.com', 'm.facebook.com',\r\n    'twitter.com', 'x.com', 'linkedin.com',\r\n    'instagram.com', 'tiktok.com', 'snapchat.com',\r\n    'reddit.com', 'www.reddit.com',\r\n    // Chat and communication\r\n    'discord.com', 'slack.com', 'teams.microsoft.com',\r\n    'whatsapp.com', 'telegram.org', 'signal.org'\r\n  ];\r\n\r\n  private unsuitablePatterns = [\r\n    '/admin', '/dashboard', '/wp-admin', '/wp-login',\r\n    '/login', '/signin', '/signup', '/register',\r\n    '/checkout', '/cart', '/payment', '/billing'\r\n  ];\r\n\r\n  /**\r\n   * Check if current page is suitable for text analysis\r\n   */\r\n  isPageSuitable(): boolean {\r\n    const url = window.location.href.toLowerCase();\r\n    const hostname = window.location.hostname.toLowerCase();\r\n    const pathname = window.location.pathname.toLowerCase();\r\n    \r\n    // Skip extension pages\r\n    if (url.startsWith('chrome-extension://') || \r\n        url.startsWith('moz-extension://') || \r\n        url.startsWith('ms-browser-extension://')) {\r\n      console.log('\uD83D\uDEAB Skipping analysis - extension page detected');\r\n      return false;\r\n    }\r\n\r\n    // Check hostname blacklist\r\n    for (const unsuitableHost of this.unsuitableHostnames) {\r\n      if (hostname.includes(unsuitableHost)) {\r\n        console.log(`\uD83D\uDEAB Skipping analysis - unsuitable site: ${unsuitableHost}`);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Check pathname patterns\r\n    for (const pattern of this.unsuitablePatterns) {\r\n      if (pathname.includes(pattern)) {\r\n        console.log(`\uD83D\uDEAB Skipping analysis - unsuitable page: ${pattern}`);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Check for minimum content requirements\r\n    if (!this.hasMinimumContent()) {\r\n      console.log('\uD83D\uDEAB Skipping analysis - insufficient content');\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private hasMinimumContent(): boolean {\r\n    const bodyText = document.body.textContent || '';\r\n    const wordCount = bodyText.trim().split(/\\s+/).length;\r\n    const paragraphCount = document.querySelectorAll('p').length;\r\n    \r\n    return wordCount >= 100 && paragraphCount >= 2;\r\n  }\r\n}\r\n\r\n/**\r\n * Main Text Analysis Engine\r\n * \r\n * Orchestrates all analysis components to provide comprehensive text analysis.\r\n * This is the main class that other modules interact with.\r\n */\r\nexport class TextAnalysisEngine {\r\n  private colemanLiau = new ColemanLiauAnalyzer();\r\n  private extractor = new ContentExtractor();\r\n  private suitabilityDetector = new PageSuitabilityDetector();\r\n  \r\n  // Configuration\r\n  private baseReadingSpeedWPM = 225; // Average adult reading speed\r\n\r\n  /**\r\n   * Perform comprehensive text analysis on current page\r\n   */\r\n  async analyzeCurrentPage(readingSpeedWPM: number = this.baseReadingSpeedWPM): Promise<AnalysisResult | null> {\r\n    console.log('\uD83D\uDCCA Starting text analysis...');\r\n\r\n    // Check page suitability\r\n    if (!this.suitabilityDetector.isPageSuitable()) {\r\n      console.log('\uD83D\uDEAB Page not suitable for analysis');\r\n      return null;\r\n    }\r\n\r\n    // Extract content\r\n    const { text, title, element } = this.extractor.extractMainContent();\r\n    \r\n    if (!text || text.length < 100) {\r\n      console.log('\uD83D\uDEAB Insufficient text content for analysis');\r\n      return null;\r\n    }\r\n\r\n    // Perform Coleman-Liau analysis\r\n    const colemanLiauIndex = this.colemanLiau.calculateIndex(text);\r\n    const complexityScore = this.colemanLiau.getComplexityClassification(colemanLiauIndex);\r\n    const readabilityLevel = this.colemanLiau.getReadabilityLevel(colemanLiauIndex);\r\n\r\n    // Calculate additional metrics\r\n    const wordCount = text.trim().split(/\\s+/).length;\r\n    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0).length;\r\n    const characters = (text.match(/[a-zA-Z0-9]/g) || []).length;\r\n    \r\n    const averageSentenceLength = Math.round((wordCount / Math.max(1, sentences)) * 10) / 10;\r\n    const averageCharactersPerWord = Math.round((characters / wordCount) * 10) / 10;\r\n\r\n    // Calculate reading time with complexity adjustment\r\n    let adjustedWPM = readingSpeedWPM;\r\n    if (colemanLiauIndex > 15) adjustedWPM *= 0.8;  // Very complex: 20% slower\r\n    else if (colemanLiauIndex > 12) adjustedWPM *= 0.9;  // Complex: 10% slower\r\n    else if (colemanLiauIndex < 6) adjustedWPM *= 1.1;   // Simple: 10% faster\r\n    \r\n    const readingTimeMinutes = Math.ceil(wordCount / adjustedWPM);\r\n\r\n    const result: AnalysisResult = {\r\n      wordCount,\r\n      readingTime: readingTimeMinutes,\r\n      complexity: {\r\n        averageSentenceLength,\r\n        averageCharactersPerWord,\r\n        complexityScore,\r\n        readabilityLevel,\r\n        colemanLiauIndex\r\n      },\r\n      url: window.location.href,\r\n      title,\r\n      timestamp: Date.now(),\r\n      textContent: text // Store for blur mode\r\n    };\r\n\r\n    console.log('\u2705 Analysis complete:', result);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get the main content element for blur mode\r\n   */\r\n  getMainContentElement(): Element | null {\r\n    const { element } = this.extractor.extractMainContent();\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Update reading speed for calculations\r\n   */\r\n  setReadingSpeed(wpm: number): void {\r\n    this.baseReadingSpeedWPM = wpm;\r\n    console.log(`\uD83D\uDCD6 Reading speed updated to ${wpm} WPM`);\r\n  }\r\n}", "/**\r\n * BlurModeManager Module\r\n * \r\n * Extracted from complexity-reader and refactored for WebRay-M modular architecture.\r\n * Handles progressive word revelation for focused reading (blur mode).\r\n * \r\n * POTENTIAL WEBRAY-M MODULE CANDIDATE - High reuse potential for reading-focused extensions\r\n */\r\n\r\nexport interface BlurModeConfig {\r\n  wpm: number; // Words per minute (50-800)\r\n  highlightColor: string;\r\n  progressIndicator: boolean;\r\n  keyboardControls: boolean;\r\n  autoScroll: boolean;\r\n}\r\n\r\nexport interface BlurModeStats {\r\n  wordsRevealed: number;\r\n  totalWords: number;\r\n  timeElapsed: number;\r\n  currentWPM: number;\r\n  isActive: boolean;\r\n  isPaused: boolean;\r\n}\r\n\r\nexport interface BlurModeEvents {\r\n  onStart: () => void;\r\n  onPause: () => void;\r\n  onResume: () => void;\r\n  onStop: () => void;\r\n  onWordRevealed: (wordIndex: number, word: string) => void;\r\n  onComplete: (stats: BlurModeStats) => void;\r\n}\r\n\r\n/**\r\n * BlurModeManager - Progressive Word Revelation System\r\n * \r\n * Extracts text content, wraps words in spans, and reveals them progressively\r\n * at a configurable reading speed with full keyboard control support.\r\n */\r\nexport class BlurModeManager {\r\n  private config: BlurModeConfig;\r\n  private events: Partial<BlurModeEvents>;\r\n  private isActive = false;\r\n  private isPaused = false;\r\n  private currentWordIndex = 0;\r\n  private words: HTMLElement[] = [];\r\n  private originalContent: string = '';\r\n  private contentContainer: HTMLElement | null = null;\r\n  private revealTimer: number | null = null;\r\n  private startTime: number = 0;\r\n  private keyboardListener: ((e: KeyboardEvent) => void) | null = null;\r\n\r\n  constructor(config: Partial<BlurModeConfig> = {}, events: Partial<BlurModeEvents> = {}) {\r\n    this.config = {\r\n      wpm: 225,\r\n      highlightColor: '#4285f4',\r\n      progressIndicator: true,\r\n      keyboardControls: true,\r\n      autoScroll: true,\r\n      ...config\r\n    };\r\n    this.events = events;\r\n  }\r\n\r\n  /**\r\n   * Start blur mode on the current page\r\n   * Extracts content, wraps words, and begins progressive revelation\r\n   */\r\n  async startBlurMode(targetElement?: HTMLElement): Promise<boolean> {\r\n    try {\r\n      console.log('\uD83C\uDFAF Starting BlurMode...');\r\n      \r\n      // Find content container\r\n      this.contentContainer = targetElement || this.findMainContent();\r\n      if (!this.contentContainer) {\r\n        console.error('\u274C No suitable content found for blur mode');\r\n        return false;\r\n      }\r\n\r\n      // Store original content for restoration\r\n      this.originalContent = this.contentContainer.innerHTML;\r\n      \r\n      // Process and wrap words\r\n      const wordCount = this.processTextContent();\r\n      if (wordCount === 0) {\r\n        console.error('\u274C No words found to process');\r\n        return false;\r\n      }\r\n\r\n      // Initialize state\r\n      this.isActive = true;\r\n      this.isPaused = false;\r\n      this.currentWordIndex = 0;\r\n      this.startTime = Date.now();\r\n\r\n      // Set up keyboard controls\r\n      if (this.config.keyboardControls) {\r\n        this.setupKeyboardControls();\r\n      }\r\n\r\n      // Hide all words initially\r\n      this.hideAllWords();\r\n\r\n      // Start revelation timer\r\n      this.startRevealTimer();\r\n\r\n      console.log(`\u2705 BlurMode started: ${wordCount} words at ${this.config.wpm} WPM`);\r\n      this.events.onStart?.();\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('\u274C Failed to start blur mode:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop blur mode and restore original content\r\n   */\r\n  stopBlurMode(): void {\r\n    if (!this.isActive) return;\r\n\r\n    console.log('\u23F9\uFE0F Stopping BlurMode...');\r\n    \r\n    // Clear timer\r\n    if (this.revealTimer) {\r\n      clearInterval(this.revealTimer);\r\n      this.revealTimer = null;\r\n    }\r\n\r\n    // Remove keyboard listener\r\n    if (this.keyboardListener) {\r\n      document.removeEventListener('keydown', this.keyboardListener);\r\n      this.keyboardListener = null;\r\n    }\r\n\r\n    // Restore original content\r\n    if (this.contentContainer && this.originalContent) {\r\n      this.contentContainer.innerHTML = this.originalContent;\r\n    }\r\n\r\n    // Generate final stats\r\n    const stats = this.getStats();\r\n    \r\n    // Reset state\r\n    this.isActive = false;\r\n    this.isPaused = false;\r\n    this.currentWordIndex = 0;\r\n    this.words = [];\r\n\r\n    console.log('\u2705 BlurMode stopped, content restored');\r\n    this.events.onStop?.();\r\n    this.events.onComplete?.(stats);\r\n  }\r\n\r\n  /**\r\n   * Pause/resume blur mode\r\n   */\r\n  togglePause(): void {\r\n    if (!this.isActive) return;\r\n\r\n    if (this.isPaused) {\r\n      this.resumeBlurMode();\r\n    } else {\r\n      this.pauseBlurMode();\r\n    }\r\n  }\r\n\r\n  private pauseBlurMode(): void {\r\n    if (this.revealTimer) {\r\n      clearInterval(this.revealTimer);\r\n      this.revealTimer = null;\r\n    }\r\n    this.isPaused = true;\r\n    console.log('\u23F8\uFE0F BlurMode paused');\r\n    this.events.onPause?.();\r\n  }\r\n\r\n  private resumeBlurMode(): void {\r\n    this.startRevealTimer();\r\n    this.isPaused = false;\r\n    console.log('\u25B6\uFE0F BlurMode resumed');\r\n    this.events.onResume?.();\r\n  }\r\n\r\n  /**\r\n   * Adjust reading speed\r\n   */\r\n  adjustSpeed(wpm: number): void {\r\n    this.config.wpm = Math.max(50, Math.min(800, wpm));\r\n    \r\n    if (this.isActive && !this.isPaused) {\r\n      // Restart timer with new speed\r\n      if (this.revealTimer) {\r\n        clearInterval(this.revealTimer);\r\n      }\r\n      this.startRevealTimer();\r\n    }\r\n    \r\n    console.log(`\uD83C\uDF9B\uFE0F BlurMode speed adjusted to ${this.config.wpm} WPM`);\r\n  }\r\n\r\n  /**\r\n   * Get current statistics\r\n   */\r\n  getStats(): BlurModeStats {\r\n    const timeElapsed = this.isActive ? Date.now() - this.startTime : 0;\r\n    const actualWPM = timeElapsed > 0 ? (this.currentWordIndex / (timeElapsed / 60000)) : 0;\r\n\r\n    return {\r\n      wordsRevealed: this.currentWordIndex,\r\n      totalWords: this.words.length,\r\n      timeElapsed,\r\n      currentWPM: Math.round(actualWPM),\r\n      isActive: this.isActive,\r\n      isPaused: this.isPaused\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Find main content area using semantic selectors\r\n   */\r\n  private findMainContent(): HTMLElement | null {\r\n    const selectors = [\r\n      'main',\r\n      'article',\r\n      '[role=\"main\"]',\r\n      '.main-content',\r\n      '.article-content',\r\n      '.post-content',\r\n      '.content',\r\n      '#content',\r\n      'div[id*=\"content\"]',\r\n      'div[class*=\"content\"]'\r\n    ];\r\n\r\n    for (const selector of selectors) {\r\n      const element = document.querySelector(selector) as HTMLElement;\r\n      if (element && element.textContent && element.textContent.trim().length > 100) {\r\n        return element;\r\n      }\r\n    }\r\n\r\n    // Fallback: find element with most text content\r\n    const allDivs = document.querySelectorAll('div, section, article');\r\n    let bestCandidate: HTMLElement | null = null;\r\n    let maxTextLength = 0;\r\n\r\n    for (const div of allDivs) {\r\n      const textContent = div.textContent?.trim() || '';\r\n      if (textContent.length > maxTextLength && textContent.length > 500) {\r\n        bestCandidate = div as HTMLElement;\r\n        maxTextLength = textContent.length;\r\n      }\r\n    }\r\n\r\n    return bestCandidate;\r\n  }\r\n\r\n  /**\r\n   * Process text content and wrap individual words in spans\r\n   */\r\n  private processTextContent(): number {\r\n    if (!this.contentContainer) return 0;\r\n\r\n    const walker = document.createTreeWalker(\r\n      this.contentContainer,\r\n      NodeFilter.SHOW_TEXT,\r\n      {\r\n        acceptNode: (node) => {\r\n          const parent = node.parentNode as Element;\r\n          if (!parent) return NodeFilter.FILTER_REJECT;\r\n          \r\n          const tagName = parent.tagName.toLowerCase();\r\n          if (['script', 'style', 'noscript', 'code', 'pre'].includes(tagName)) {\r\n            return NodeFilter.FILTER_REJECT;\r\n          }\r\n          \r\n          const text = node.textContent?.trim();\r\n          return text && text.length > 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;\r\n        }\r\n      }\r\n    );\r\n\r\n    const textNodes: Node[] = [];\r\n    let node;\r\n    while (node = walker.nextNode()) {\r\n      textNodes.push(node);\r\n    }\r\n\r\n    // Process each text node and wrap words\r\n    let wordIndex = 0;\r\n    for (const textNode of textNodes) {\r\n      const text = textNode.textContent || '';\r\n      const words = text.split(/(\\s+)/).filter(part => part.trim().length > 0);\r\n      \r\n      if (words.length === 0) continue;\r\n\r\n      const parent = textNode.parentNode;\r\n      if (!parent) continue;\r\n\r\n      // Create word spans\r\n      const fragment = document.createDocumentFragment();\r\n      \r\n      for (let i = 0; i < words.length; i++) {\r\n        const word = words[i];\r\n        if (word.trim().length === 0) continue;\r\n\r\n        const wordSpan = document.createElement('span');\r\n        wordSpan.textContent = word;\r\n        wordSpan.className = 'blur-word';\r\n        wordSpan.dataset.wordIndex = wordIndex.toString();\r\n        wordSpan.style.cssText = `\r\n          visibility: hidden;\r\n          transition: all 0.2s ease;\r\n        `;\r\n\r\n        fragment.appendChild(wordSpan);\r\n        this.words.push(wordSpan);\r\n        wordIndex++;\r\n\r\n        // Add space after word (except last)\r\n        if (i < words.length - 1) {\r\n          fragment.appendChild(document.createTextNode(' '));\r\n        }\r\n      }\r\n\r\n      // Replace original text node with wrapped words\r\n      parent.replaceChild(fragment, textNode);\r\n    }\r\n\r\n    return this.words.length;\r\n  }\r\n\r\n  /**\r\n   * Hide all words initially\r\n   */\r\n  private hideAllWords(): void {\r\n    this.words.forEach(word => {\r\n      word.style.visibility = 'hidden';\r\n      word.style.backgroundColor = 'transparent';\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Start the word revelation timer\r\n   */\r\n  private startRevealTimer(): void {\r\n    const intervalMs = 60000 / this.config.wpm; // Convert WPM to milliseconds per word\r\n    \r\n    this.revealTimer = window.setInterval(() => {\r\n      this.revealNextWord();\r\n    }, intervalMs);\r\n  }\r\n\r\n  /**\r\n   * Reveal the next word\r\n   */\r\n  private revealNextWord(): void {\r\n    if (this.currentWordIndex >= this.words.length) {\r\n      // All words revealed - complete blur mode\r\n      this.stopBlurMode();\r\n      return;\r\n    }\r\n\r\n    // Hide previous word highlight\r\n    if (this.currentWordIndex > 0) {\r\n      const prevWord = this.words[this.currentWordIndex - 1];\r\n      prevWord.style.backgroundColor = 'transparent';\r\n    }\r\n\r\n    // Reveal and highlight current word\r\n    const currentWord = this.words[this.currentWordIndex];\r\n    currentWord.style.visibility = 'visible';\r\n    currentWord.style.backgroundColor = this.config.highlightColor + '33'; // 20% opacity\r\n\r\n    // Auto-scroll to keep word visible\r\n    if (this.config.autoScroll) {\r\n      currentWord.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n    }\r\n\r\n    // Trigger word revealed event\r\n    this.events.onWordRevealed?.(this.currentWordIndex, currentWord.textContent || '');\r\n\r\n    this.currentWordIndex++;\r\n  }\r\n\r\n  /**\r\n   * Setup keyboard controls\r\n   */\r\n  private setupKeyboardControls(): void {\r\n    this.keyboardListener = (e: KeyboardEvent) => {\r\n      if (!this.isActive) return;\r\n\r\n      switch (e.code) {\r\n        case 'Space':\r\n          e.preventDefault();\r\n          this.togglePause();\r\n          break;\r\n        \r\n        case 'Escape':\r\n          e.preventDefault();\r\n          this.stopBlurMode();\r\n          break;\r\n        \r\n        case 'ArrowRight':\r\n          e.preventDefault();\r\n          if (this.isPaused && this.currentWordIndex < this.words.length) {\r\n            this.revealNextWord();\r\n          }\r\n          break;\r\n        \r\n        case 'ArrowLeft':\r\n          e.preventDefault();\r\n          if (this.isPaused && this.currentWordIndex > 0) {\r\n            this.currentWordIndex = Math.max(0, this.currentWordIndex - 2);\r\n            this.hideWordsAfter(this.currentWordIndex);\r\n            this.revealNextWord();\r\n          }\r\n          break;\r\n        \r\n        case 'KeyR':\r\n          e.preventDefault();\r\n          this.restartBlurMode();\r\n          break;\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', this.keyboardListener);\r\n  }\r\n\r\n  /**\r\n   * Hide words after specified index\r\n   */\r\n  private hideWordsAfter(index: number): void {\r\n    for (let i = index; i < this.words.length; i++) {\r\n      this.words[i].style.visibility = 'hidden';\r\n      this.words[i].style.backgroundColor = 'transparent';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restart blur mode from beginning\r\n   */\r\n  private restartBlurMode(): void {\r\n    if (!this.isActive) return;\r\n\r\n    // Reset to beginning\r\n    this.currentWordIndex = 0;\r\n    this.startTime = Date.now();\r\n    \r\n    // Hide all words\r\n    this.hideAllWords();\r\n    \r\n    // Restart timer\r\n    if (this.revealTimer) {\r\n      clearInterval(this.revealTimer);\r\n    }\r\n    \r\n    if (!this.isPaused) {\r\n      this.startRevealTimer();\r\n    }\r\n    \r\n    console.log('\uD83D\uDD04 BlurMode restarted');\r\n  }\r\n\r\n  /**\r\n   * Check if blur mode is currently active\r\n   */\r\n  isBlurModeActive(): boolean {\r\n    return this.isActive;\r\n  }\r\n\r\n  /**\r\n   * Get current configuration\r\n   */\r\n  getConfig(): BlurModeConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  /**\r\n   * Update configuration\r\n   */\r\n  updateConfig(newConfig: Partial<BlurModeConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n  }\r\n}", "/**\r\n * ReadingSessionManager Module\r\n * \r\n * Extracted from complexity-reader and refactored for WebRay-M modular architecture.\r\n * Handles reading session tracking, statistics calculation, and progress analytics.\r\n * \r\n * POTENTIAL WEBRAY-M MODULE CANDIDATE - High reuse potential for productivity extensions\r\n */\r\n\r\nexport interface ReadingSession {\r\n  id: string;\r\n  startTime: number;\r\n  endTime?: number;\r\n  url: string;\r\n  title: string;\r\n  wordsRead: number;\r\n  pagesAnalyzed: number;\r\n  blurModeUsed: boolean;\r\n  blurModeWords?: number;\r\n  avgComplexity?: string;\r\n  completionRate: number; // 0-1\r\n  actualWPM?: number;\r\n  targetWPM: number;\r\n  duration: number; // milliseconds\r\n  isActive: boolean;\r\n}\r\n\r\nexport interface ReadingStatistics {\r\n  totalSessions: number;\r\n  totalWordsRead: number;\r\n  totalTimeSpent: number; // milliseconds\r\n  averageWPM: number;\r\n  averageSessionLength: number;\r\n  blurModeUsage: number; // percentage\r\n  favoriteComplexity: string;\r\n  currentStreak: number; // days\r\n  longestStreak: number; // days\r\n  dailyGoalProgress: number; // 0-1\r\n  weeklyStats: DailyStats[];\r\n  monthlyStats: MonthlyStats;\r\n}\r\n\r\nexport interface DailyStats {\r\n  date: string; // YYYY-MM-DD\r\n  wordsRead: number;\r\n  sessionsCount: number;\r\n  timeSpent: number;\r\n  goalMet: boolean;\r\n}\r\n\r\nexport interface MonthlyStats {\r\n  month: string; // YYYY-MM\r\n  totalWords: number;\r\n  totalSessions: number;\r\n  totalTime: number;\r\n  averageWPM: number;\r\n  streakDays: number;\r\n}\r\n\r\nexport interface SessionGoals {\r\n  dailyWordGoal: number; // default 2000\r\n  weeklyGoalEnabled: boolean;\r\n  weeklyWordGoal: number; // default 14000\r\n  streakGoalEnabled: boolean;\r\n  targetStreakDays: number; // default 7\r\n}\r\n\r\nexport interface SessionEvents {\r\n  onSessionStart: (session: ReadingSession) => void;\r\n  onSessionEnd: (session: ReadingSession, stats: ReadingStatistics) => void;\r\n  onGoalProgress: (progress: number, goalType: 'daily' | 'weekly') => void;\r\n  onGoalAchieved: (goalType: 'daily' | 'weekly' | 'streak') => void;\r\n  onStreakUpdated: (currentStreak: number, isNewRecord: boolean) => void;\r\n}\r\n\r\n/**\r\n * ReadingSessionManager - Comprehensive Session Tracking & Analytics\r\n * \r\n * Tracks reading sessions, calculates statistics, manages goals,\r\n * and provides comprehensive analytics for reading habits.\r\n */\r\nexport class ReadingSessionManager {\r\n  private currentSession: ReadingSession | null = null;\r\n  private goals: SessionGoals;\r\n  private events: Partial<SessionEvents>;\r\n  private storageManager: any; // Will be injected later\r\n\r\n  constructor(\r\n    goals: Partial<SessionGoals> = {},\r\n    events: Partial<SessionEvents> = {},\r\n    storageManager?: any\r\n  ) {\r\n    this.goals = {\r\n      dailyWordGoal: 2000,\r\n      weeklyGoalEnabled: true,\r\n      weeklyWordGoal: 14000,\r\n      streakGoalEnabled: true,\r\n      targetStreakDays: 7,\r\n      ...goals\r\n    };\r\n    this.events = events;\r\n    this.storageManager = storageManager;\r\n  }\r\n\r\n  /**\r\n   * Start a new reading session\r\n   */\r\n  async startSession(url: string, title: string, targetWPM: number = 225): Promise<ReadingSession> {\r\n    // End current session if active\r\n    if (this.currentSession?.isActive) {\r\n      await this.endSession();\r\n    }\r\n\r\n    const sessionId = this.generateSessionId();\r\n    this.currentSession = {\r\n      id: sessionId,\r\n      startTime: Date.now(),\r\n      url,\r\n      title,\r\n      wordsRead: 0,\r\n      pagesAnalyzed: 0,\r\n      blurModeUsed: false,\r\n      completionRate: 0,\r\n      targetWPM,\r\n      duration: 0,\r\n      isActive: true\r\n    };\r\n\r\n    console.log('\uD83D\uDE80 Reading session started:', sessionId);\r\n    this.events.onSessionStart?.(this.currentSession);\r\n    \r\n    return this.currentSession;\r\n  }\r\n\r\n  /**\r\n   * End the current reading session\r\n   */\r\n  async endSession(): Promise<ReadingSession | null> {\r\n    if (!this.currentSession || !this.currentSession.isActive) {\r\n      return null;\r\n    }\r\n\r\n    const endTime = Date.now();\r\n    this.currentSession.endTime = endTime;\r\n    this.currentSession.duration = endTime - this.currentSession.startTime;\r\n    this.currentSession.isActive = false;\r\n\r\n    // Calculate actual WPM if we have blur mode data\r\n    if (this.currentSession.blurModeWords && this.currentSession.duration > 0) {\r\n      this.currentSession.actualWPM = Math.round(\r\n        this.currentSession.blurModeWords / (this.currentSession.duration / 60000)\r\n      );\r\n    }\r\n\r\n    // Save session to storage\r\n    await this.saveSession(this.currentSession);\r\n\r\n    // Update statistics and check goals\r\n    const stats = await this.calculateStatistics();\r\n    await this.updateDailyProgress();\r\n    await this.updateStreak();\r\n    \r\n    console.log('\u23F9\uFE0F Reading session ended:', this.currentSession.id);\r\n    this.events.onSessionEnd?.(this.currentSession, stats);\r\n    \r\n    const completedSession = { ...this.currentSession };\r\n    this.currentSession = null;\r\n    \r\n    return completedSession;\r\n  }\r\n\r\n  /**\r\n   * Update current session with reading progress\r\n   */\r\n  updateSessionProgress(update: {\r\n    wordsRead?: number;\r\n    pagesAnalyzed?: number;\r\n    blurModeUsed?: boolean;\r\n    blurModeWords?: number;\r\n    avgComplexity?: string;\r\n    completionRate?: number;\r\n  }): void {\r\n    if (!this.currentSession?.isActive) return;\r\n\r\n    Object.assign(this.currentSession, update);\r\n    this.currentSession.duration = Date.now() - this.currentSession.startTime;\r\n\r\n    // Auto-save session data periodically\r\n    if (this.storageManager) {\r\n      this.saveSession(this.currentSession);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current active session\r\n   */\r\n  getCurrentSession(): ReadingSession | null {\r\n    return this.currentSession;\r\n  }\r\n\r\n  /**\r\n   * Get comprehensive reading statistics\r\n   */\r\n  async calculateStatistics(): Promise<ReadingStatistics> {\r\n    const sessions = await this.getAllSessions();\r\n    const today = this.getTodayString();\r\n    const thisWeek = this.getThisWeekDates();\r\n\r\n    // Basic totals\r\n    const totalSessions = sessions.length;\r\n    const totalWordsRead = sessions.reduce((sum, session) => sum + session.wordsRead, 0);\r\n    const totalTimeSpent = sessions.reduce((sum, session) => sum + session.duration, 0);\r\n\r\n    // Calculate averages\r\n    const completedSessions = sessions.filter(s => s.endTime);\r\n    const averageWPM = completedSessions.length > 0\r\n      ? completedSessions.reduce((sum, session) => {\r\n          return sum + (session.actualWPM || session.targetWPM);\r\n        }, 0) / completedSessions.length\r\n      : 0;\r\n\r\n    const averageSessionLength = completedSessions.length > 0\r\n      ? totalTimeSpent / completedSessions.length\r\n      : 0;\r\n\r\n    // Blur mode usage\r\n    const blurModeSessions = sessions.filter(s => s.blurModeUsed).length;\r\n    const blurModeUsage = totalSessions > 0 ? (blurModeSessions / totalSessions) * 100 : 0;\r\n\r\n    // Favorite complexity\r\n    const complexityCount: { [key: string]: number } = {};\r\n    sessions.forEach(session => {\r\n      if (session.avgComplexity) {\r\n        complexityCount[session.avgComplexity] = (complexityCount[session.avgComplexity] || 0) + 1;\r\n      }\r\n    });\r\n    const favoriteComplexity = Object.keys(complexityCount).reduce((a, b) => \r\n      complexityCount[a] > complexityCount[b] ? a : b, 'Moderate'\r\n    );\r\n\r\n    // Streak calculation\r\n    const { currentStreak, longestStreak } = await this.calculateStreaks();\r\n\r\n    // Daily goal progress\r\n    const todaySessions = sessions.filter(s => this.getDateString(s.startTime) === today);\r\n    const todayWords = todaySessions.reduce((sum, session) => sum + session.wordsRead, 0);\r\n    const dailyGoalProgress = Math.min(1, todayWords / this.goals.dailyWordGoal);\r\n\r\n    // Weekly stats\r\n    const weeklyStats = this.calculateWeeklyStats(sessions, thisWeek);\r\n\r\n    // Monthly stats\r\n    const monthlyStats = this.calculateMonthlyStats(sessions);\r\n\r\n    return {\r\n      totalSessions,\r\n      totalWordsRead,\r\n      totalTimeSpent,\r\n      averageWPM: Math.round(averageWPM),\r\n      averageSessionLength: Math.round(averageSessionLength),\r\n      blurModeUsage: Math.round(blurModeUsage),\r\n      favoriteComplexity,\r\n      currentStreak,\r\n      longestStreak,\r\n      dailyGoalProgress,\r\n      weeklyStats,\r\n      monthlyStats\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get today's reading progress\r\n   */\r\n  async getTodayProgress(): Promise<DailyStats> {\r\n    const sessions = await this.getAllSessions();\r\n    const today = this.getTodayString();\r\n    const todaySessions = sessions.filter(s => this.getDateString(s.startTime) === today);\r\n\r\n    const wordsRead = todaySessions.reduce((sum, session) => sum + session.wordsRead, 0);\r\n    const timeSpent = todaySessions.reduce((sum, session) => sum + session.duration, 0);\r\n    const goalMet = wordsRead >= this.goals.dailyWordGoal;\r\n\r\n    return {\r\n      date: today,\r\n      wordsRead,\r\n      sessionsCount: todaySessions.length,\r\n      timeSpent,\r\n      goalMet\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update daily reading goals\r\n   */\r\n  updateGoals(newGoals: Partial<SessionGoals>): void {\r\n    this.goals = { ...this.goals, ...newGoals };\r\n    \r\n    if (this.storageManager) {\r\n      this.storageManager.save('reading_goals', this.goals);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current goals\r\n   */\r\n  getGoals(): SessionGoals {\r\n    return { ...this.goals };\r\n  }\r\n\r\n  /**\r\n   * Private helper methods\r\n   */\r\n\r\n  private generateSessionId(): string {\r\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private async saveSession(session: ReadingSession): Promise<void> {\r\n    if (!this.storageManager) return;\r\n\r\n    const sessions = await this.getAllSessions();\r\n    const existingIndex = sessions.findIndex(s => s.id === session.id);\r\n    \r\n    if (existingIndex >= 0) {\r\n      sessions[existingIndex] = session;\r\n    } else {\r\n      sessions.push(session);\r\n    }\r\n\r\n    await this.storageManager.save('reading_sessions', sessions);\r\n  }\r\n\r\n  private async getAllSessions(): Promise<ReadingSession[]> {\r\n    if (!this.storageManager) return [];\r\n    \r\n    try {\r\n      return await this.storageManager.get('reading_sessions') || [];\r\n    } catch (error) {\r\n      console.error('Failed to load sessions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private async calculateStreaks(): Promise<{ currentStreak: number; longestStreak: number }> {\r\n    const sessions = await this.getAllSessions();\r\n    const uniqueDates = [...new Set(sessions\r\n      .filter(s => s.endTime) // Only completed sessions\r\n      .map(s => this.getDateString(s.startTime))\r\n    )].sort();\r\n\r\n    let currentStreak = 0;\r\n    let longestStreak = 0;\r\n    let tempStreak = 0;\r\n\r\n    const today = this.getTodayString();\r\n    const yesterday = this.getDateString(Date.now() - 24 * 60 * 60 * 1000);\r\n\r\n    // Calculate current streak (working backwards from today)\r\n    for (let i = 0; i < 30; i++) { // Check last 30 days\r\n      const checkDate = this.getDateString(Date.now() - i * 24 * 60 * 60 * 1000);\r\n      if (uniqueDates.includes(checkDate)) {\r\n        if (i === 0 || (i === 1 && checkDate === yesterday)) {\r\n          currentStreak++;\r\n        } else if (currentStreak === 0) {\r\n          break; // No activity today or yesterday, no current streak\r\n        }\r\n      } else if (i === 0 && uniqueDates.includes(yesterday)) {\r\n        // Today has no activity but yesterday does\r\n        continue;\r\n      } else if (currentStreak > 0) {\r\n        break; // Streak broken\r\n      }\r\n    }\r\n\r\n    // Calculate longest streak\r\n    tempStreak = 1;\r\n    for (let i = 1; i < uniqueDates.length; i++) {\r\n      const prevDate = new Date(uniqueDates[i - 1]);\r\n      const currDate = new Date(uniqueDates[i]);\r\n      const dayDiff = (currDate.getTime() - prevDate.getTime()) / (24 * 60 * 60 * 1000);\r\n\r\n      if (dayDiff === 1) {\r\n        tempStreak++;\r\n      } else {\r\n        longestStreak = Math.max(longestStreak, tempStreak);\r\n        tempStreak = 1;\r\n      }\r\n    }\r\n    longestStreak = Math.max(longestStreak, tempStreak);\r\n\r\n    return { currentStreak, longestStreak };\r\n  }\r\n\r\n  private async updateDailyProgress(): Promise<void> {\r\n    const todayProgress = await this.getTodayProgress();\r\n    \r\n    // Check for goal achievement\r\n    if (todayProgress.goalMet) {\r\n      this.events.onGoalAchieved?.('daily');\r\n    }\r\n\r\n    this.events.onGoalProgress?.(\r\n      todayProgress.wordsRead / this.goals.dailyWordGoal,\r\n      'daily'\r\n    );\r\n  }\r\n\r\n  private async updateStreak(): Promise<void> {\r\n    const { currentStreak, longestStreak } = await this.calculateStreaks();\r\n    const isNewRecord = currentStreak > longestStreak;\r\n    \r\n    this.events.onStreakUpdated?.(currentStreak, isNewRecord);\r\n    \r\n    if (this.goals.streakGoalEnabled && currentStreak >= this.goals.targetStreakDays) {\r\n      this.events.onGoalAchieved?.('streak');\r\n    }\r\n  }\r\n\r\n  private calculateWeeklyStats(sessions: ReadingSession[], weekDates: string[]): DailyStats[] {\r\n    return weekDates.map(date => {\r\n      const daySessions = sessions.filter(s => this.getDateString(s.startTime) === date);\r\n      const wordsRead = daySessions.reduce((sum, session) => sum + session.wordsRead, 0);\r\n      const timeSpent = daySessions.reduce((sum, session) => sum + session.duration, 0);\r\n      \r\n      return {\r\n        date,\r\n        wordsRead,\r\n        sessionsCount: daySessions.length,\r\n        timeSpent,\r\n        goalMet: wordsRead >= this.goals.dailyWordGoal\r\n      };\r\n    });\r\n  }\r\n\r\n  private calculateMonthlyStats(sessions: ReadingSession[]): MonthlyStats {\r\n    const thisMonth = this.getMonthString();\r\n    const monthSessions = sessions.filter(s => \r\n      this.getMonthString(s.startTime) === thisMonth\r\n    );\r\n\r\n    const totalWords = monthSessions.reduce((sum, session) => sum + session.wordsRead, 0);\r\n    const totalTime = monthSessions.reduce((sum, session) => sum + session.duration, 0);\r\n    const completedSessions = monthSessions.filter(s => s.endTime);\r\n    \r\n    const averageWPM = completedSessions.length > 0\r\n      ? completedSessions.reduce((sum, session) => {\r\n          return sum + (session.actualWPM || session.targetWPM);\r\n        }, 0) / completedSessions.length\r\n      : 0;\r\n\r\n    // Calculate streak days for this month\r\n    const uniqueDates = [...new Set(monthSessions.map(s => this.getDateString(s.startTime)))];\r\n    \r\n    return {\r\n      month: thisMonth,\r\n      totalWords,\r\n      totalSessions: monthSessions.length,\r\n      totalTime,\r\n      averageWPM: Math.round(averageWPM),\r\n      streakDays: uniqueDates.length\r\n    };\r\n  }\r\n\r\n  private getTodayString(): string {\r\n    return this.getDateString(Date.now());\r\n  }\r\n\r\n  private getDateString(timestamp: number): string {\r\n    return new Date(timestamp).toISOString().split('T')[0];\r\n  }\r\n\r\n  private getMonthString(timestamp: number = Date.now()): string {\r\n    return new Date(timestamp).toISOString().substring(0, 7); // YYYY-MM\r\n  }\r\n\r\n  private getThisWeekDates(): string[] {\r\n    const dates = [];\r\n    const today = new Date();\r\n    const startOfWeek = new Date(today);\r\n    startOfWeek.setDate(today.getDate() - today.getDay()); // Start of week (Sunday)\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date(startOfWeek);\r\n      date.setDate(startOfWeek.getDate() + i);\r\n      dates.push(this.getDateString(date.getTime()));\r\n    }\r\n\r\n    return dates;\r\n  }\r\n\r\n  /**\r\n   * Export session data for backup\r\n   */\r\n  async exportData(): Promise<{ sessions: ReadingSession[]; goals: SessionGoals; stats: ReadingStatistics }> {\r\n    const sessions = await this.getAllSessions();\r\n    const stats = await this.calculateStatistics();\r\n    \r\n    return {\r\n      sessions,\r\n      goals: this.goals,\r\n      stats\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Import session data from backup\r\n   */\r\n  async importData(data: { sessions: ReadingSession[]; goals?: SessionGoals }): Promise<void> {\r\n    if (!this.storageManager) return;\r\n\r\n    if (data.sessions) {\r\n      await this.storageManager.save('reading_sessions', data.sessions);\r\n    }\r\n    \r\n    if (data.goals) {\r\n      this.goals = { ...this.goals, ...data.goals };\r\n      await this.storageManager.save('reading_goals', this.goals);\r\n    }\r\n  }\r\n}", "/**\r\n * StorageManager Module\r\n * \r\n * Chrome Extension Storage Abstraction Layer with Enhanced Reliability\r\n * \r\n * PROBLEM SOLVED: The original complexity-reader extension suffered from context invalidation\r\n * issues where chrome.storage API calls would fail after extension reloads/updates, causing\r\n * \"Extension context invalidated\" errors and breaking user preferences/session data.\r\n * \r\n * SOLUTION: This module provides a robust abstraction layer with:\r\n * - Context validation before storage operations\r\n * - Automatic fallback to localStorage when extension context is invalid\r\n * - Retry mechanisms with exponential backoff\r\n * - Data validation and type safety\r\n * - Comprehensive error handling and logging\r\n * \r\n * POTENTIAL WEBRAY-M MODULE CANDIDATE - Essential for all Chrome extensions\r\n * \r\n * @author WebRay-M Framework\r\n * @version 1.0.0\r\n * @since 2024\r\n */\r\n\r\n/**\r\n * Storage operation result interface\r\n */\r\nexport interface StorageResult<T> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: string;\r\n  fromFallback?: boolean; // Indicates if data came from localStorage fallback\r\n  retryCount?: number;\r\n}\r\n\r\n/**\r\n * Storage configuration options\r\n */\r\nexport interface StorageConfig {\r\n  maxRetries: number;         // Maximum retry attempts (default: 3)\r\n  retryDelayMs: number;       // Base retry delay in milliseconds (default: 100)\r\n  useExponentialBackoff: boolean; // Use exponential backoff for retries (default: true)\r\n  enableFallback: boolean;    // Enable localStorage fallback (default: true)\r\n  fallbackPrefix: string;     // Prefix for localStorage keys (default: 'readwise_')\r\n  validateData: boolean;      // Validate data before storage operations (default: true)\r\n  debugMode: boolean;         // Enable detailed logging (default: false)\r\n}\r\n\r\n/**\r\n * Data validation schema interface\r\n */\r\nexport interface DataSchema {\r\n  [key: string]: {\r\n    type: 'string' | 'number' | 'boolean' | 'object' | 'array';\r\n    required?: boolean;\r\n    validate?: (value: any) => boolean;\r\n  };\r\n}\r\n\r\n/**\r\n * StorageManager - Robust Chrome Extension Storage Handler\r\n * \r\n * This class provides a reliable interface to Chrome extension storage APIs with\r\n * automatic fallback mechanisms, retry logic, and comprehensive error handling.\r\n * \r\n * KEY FEATURES:\r\n * 1. Context Validation - Checks if extension context is valid before operations\r\n * 2. Automatic Fallback - Uses localStorage when Chrome storage is unavailable\r\n * 3. Retry Logic - Automatically retries failed operations with backoff\r\n * 4. Data Validation - Validates data structure before saving\r\n * 5. Type Safety - Full TypeScript support with generic methods\r\n * 6. Error Recovery - Graceful handling of all storage failure scenarios\r\n * \r\n * USAGE EXAMPLES:\r\n * \r\n * // Basic usage with automatic error handling\r\n * const storage = new StorageManager();\r\n * const result = await storage.save('user_preferences', { theme: 'dark', wpm: 225 });\r\n * if (result.success) {\r\n *   console.log('Preferences saved successfully');\r\n * }\r\n * \r\n * // Retrieve data with type safety\r\n * const preferences = await storage.get<UserPreferences>('user_preferences');\r\n * if (preferences.success && preferences.data) {\r\n *   console.log('User WPM:', preferences.data.wpm);\r\n * }\r\n * \r\n * // Batch operations for efficiency\r\n * const batchResult = await storage.saveBatch({\r\n *   'sessions': sessionData,\r\n *   'goals': goalData,\r\n *   'stats': statisticsData\r\n * });\r\n */\r\nexport class StorageManager {\r\n  private config: StorageConfig;\r\n  private schemas: Map<string, DataSchema> = new Map();\r\n  \r\n  /**\r\n   * Initialize StorageManager with configuration options\r\n   * \r\n   * @param config - Storage configuration options\r\n   */\r\n  constructor(config: Partial<StorageConfig> = {}) {\r\n    // Merge user config with intelligent defaults\r\n    this.config = {\r\n      maxRetries: 3,              // Retry up to 3 times - balances reliability vs performance\r\n      retryDelayMs: 100,          // Start with 100ms - fast enough for UX, allows recovery\r\n      useExponentialBackoff: true, // 100ms, 200ms, 400ms - prevents thundering herd\r\n      enableFallback: true,       // Always enable fallback - critical for reliability\r\n      fallbackPrefix: 'readwise_', // Namespace localStorage to avoid conflicts\r\n      validateData: true,         // Always validate - prevents data corruption\r\n      debugMode: false,           // Disable by default - enable for troubleshooting\r\n      ...config\r\n    };\r\n\r\n    // Log initialization for debugging\r\n    if (this.config.debugMode) {\r\n      console.log('\uD83D\uDDC4\uFE0F StorageManager initialized with config:', this.config);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save data to storage with comprehensive error handling\r\n   * \r\n   * This method attempts to save data using Chrome's storage.sync API first,\r\n   * with automatic fallback to localStorage if the extension context is invalid.\r\n   * \r\n   * RELIABILITY FEATURES:\r\n   * - Context validation before attempting Chrome storage\r\n   * - Automatic retry with exponential backoff on failure\r\n   * - localStorage fallback when Chrome storage unavailable\r\n   * - Data validation before saving (if enabled)\r\n   * - Comprehensive error logging\r\n   * \r\n   * @param key - Storage key (must be non-empty string)\r\n   * @param data - Data to save (any serializable type)\r\n   * @param useLocal - Force use of chrome.storage.local instead of sync\r\n   * @returns Promise<StorageResult<T>> - Result object with success status and metadata\r\n   */\r\n  async save<T>(key: string, data: T, useLocal: boolean = false): Promise<StorageResult<T>> {\r\n    // Input validation - prevent invalid operations early\r\n    if (!key || typeof key !== 'string') {\r\n      return {\r\n        success: false,\r\n        error: 'Invalid key: must be non-empty string'\r\n      };\r\n    }\r\n\r\n    // Data validation if enabled\r\n    if (this.config.validateData && this.schemas.has(key)) {\r\n      const validationResult = this.validateData(key, data);\r\n      if (!validationResult.isValid) {\r\n        return {\r\n          success: false,\r\n          error: `Data validation failed: ${validationResult.error}`\r\n        };\r\n      }\r\n    }\r\n\r\n    // Log operation start for debugging\r\n    if (this.config.debugMode) {\r\n      console.log(`\uD83D\uDCBE Saving data to storage: ${key}`, data);\r\n    }\r\n\r\n    // Attempt Chrome storage with retry logic\r\n    const chromeResult = await this.attemptChromeStorage('save', key, data, useLocal);\r\n    if (chromeResult.success) {\r\n      return chromeResult;\r\n    }\r\n\r\n    // Fallback to localStorage if Chrome storage failed and fallback is enabled\r\n    if (this.config.enableFallback) {\r\n      if (this.config.debugMode) {\r\n        console.log(`\uD83D\uDD04 Chrome storage failed, trying localStorage fallback for: ${key}`);\r\n      }\r\n\r\n      try {\r\n        const fallbackKey = this.config.fallbackPrefix + key;\r\n        const serialized = JSON.stringify(data);\r\n        localStorage.setItem(fallbackKey, serialized);\r\n        \r\n        if (this.config.debugMode) {\r\n          console.log(`\u2705 Successfully saved to localStorage: ${fallbackKey}`);\r\n        }\r\n\r\n        return {\r\n          success: true,\r\n          data,\r\n          fromFallback: true\r\n        };\r\n      } catch (fallbackError) {\r\n        // Even localStorage failed - this is a critical error\r\n        console.error('\u274C Both Chrome storage and localStorage failed:', fallbackError);\r\n        return {\r\n          success: false,\r\n          error: `All storage methods failed. Chrome: ${chromeResult.error}, LocalStorage: ${fallbackError}`,\r\n          fromFallback: true\r\n        };\r\n      }\r\n    }\r\n\r\n    // No fallback available, return Chrome storage error\r\n    return chromeResult;\r\n  }\r\n\r\n  /**\r\n   * Retrieve data from storage with automatic fallback handling\r\n   * \r\n   * This method attempts to retrieve data from Chrome storage first, with\r\n   * automatic fallback to localStorage if needed. Includes data validation\r\n   * and type safety.\r\n   * \r\n   * RELIABILITY FEATURES:\r\n   * - Tries Chrome storage first (most reliable when available)\r\n   * - Automatic localStorage fallback with proper key prefixing\r\n   * - Data validation after retrieval (if schema defined)\r\n   * - Type safety with TypeScript generics\r\n   * - Comprehensive error handling\r\n   * \r\n   * @param key - Storage key to retrieve\r\n   * @param defaultValue - Default value if key not found\r\n   * @param useLocal - Force use of chrome.storage.local instead of sync\r\n   * @returns Promise<StorageResult<T>> - Result object with data or error\r\n   */\r\n  async get<T>(key: string, defaultValue?: T, useLocal: boolean = false): Promise<StorageResult<T>> {\r\n    // Input validation\r\n    if (!key || typeof key !== 'string') {\r\n      return {\r\n        success: false,\r\n        error: 'Invalid key: must be non-empty string'\r\n      };\r\n    }\r\n\r\n    if (this.config.debugMode) {\r\n      console.log(`\uD83D\uDCD6 Retrieving data from storage: ${key}`);\r\n    }\r\n\r\n    // Attempt Chrome storage first\r\n    const chromeResult = await this.attemptChromeStorage<T>('get', key, undefined, useLocal);\r\n    if (chromeResult.success && chromeResult.data !== undefined) {\r\n      // Validate retrieved data if schema exists\r\n      if (this.config.validateData && this.schemas.has(key)) {\r\n        const validationResult = this.validateData(key, chromeResult.data);\r\n        if (!validationResult.isValid) {\r\n          console.warn(`\u26A0\uFE0F Retrieved data failed validation for key ${key}:`, validationResult.error);\r\n          // Continue with fallback rather than failing completely\r\n        } else {\r\n          return chromeResult;\r\n        }\r\n      } else {\r\n        return chromeResult;\r\n      }\r\n    }\r\n\r\n    // Try localStorage fallback\r\n    if (this.config.enableFallback) {\r\n      if (this.config.debugMode) {\r\n        console.log(`\uD83D\uDD04 Chrome storage failed/empty, trying localStorage fallback for: ${key}`);\r\n      }\r\n\r\n      try {\r\n        const fallbackKey = this.config.fallbackPrefix + key;\r\n        const stored = localStorage.getItem(fallbackKey);\r\n        \r\n        if (stored !== null) {\r\n          const parsed = JSON.parse(stored) as T;\r\n          \r\n          // Validate fallback data if schema exists\r\n          if (this.config.validateData && this.schemas.has(key)) {\r\n            const validationResult = this.validateData(key, parsed);\r\n            if (!validationResult.isValid) {\r\n              console.warn(`\u26A0\uFE0F Fallback data failed validation for key ${key}:`, validationResult.error);\r\n              // Use default value instead of invalid data\r\n              return {\r\n                success: true,\r\n                data: defaultValue,\r\n                fromFallback: true\r\n              };\r\n            }\r\n          }\r\n\r\n          if (this.config.debugMode) {\r\n            console.log(`\u2705 Successfully retrieved from localStorage: ${fallbackKey}`, parsed);\r\n          }\r\n\r\n          return {\r\n            success: true,\r\n            data: parsed,\r\n            fromFallback: true\r\n          };\r\n        }\r\n      } catch (fallbackError) {\r\n        console.error('\u274C localStorage fallback failed:', fallbackError);\r\n      }\r\n    }\r\n\r\n    // No data found anywhere, return default value\r\n    if (defaultValue !== undefined) {\r\n      return {\r\n        success: true,\r\n        data: defaultValue,\r\n        fromFallback: this.config.enableFallback\r\n      };\r\n    }\r\n\r\n    // No data and no default\r\n    return {\r\n      success: false,\r\n      error: `No data found for key: ${key}`,\r\n      fromFallback: this.config.enableFallback\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Remove data from storage\r\n   * \r\n   * Removes data from both Chrome storage and localStorage fallback\r\n   * to ensure complete cleanup.\r\n   * \r\n   * @param key - Key to remove\r\n   * @param useLocal - Force use of chrome.storage.local instead of sync\r\n   * @returns Promise<StorageResult<void>> - Result object with success status\r\n   */\r\n  async remove(key: string, useLocal: boolean = false): Promise<StorageResult<void>> {\r\n    if (!key || typeof key !== 'string') {\r\n      return {\r\n        success: false,\r\n        error: 'Invalid key: must be non-empty string'\r\n      };\r\n    }\r\n\r\n    if (this.config.debugMode) {\r\n      console.log(`\uD83D\uDDD1\uFE0F Removing data from storage: ${key}`);\r\n    }\r\n\r\n    let chromeSuccess = false;\r\n    let fallbackSuccess = false;\r\n    let errors: string[] = [];\r\n\r\n    // Remove from Chrome storage\r\n    const chromeResult = await this.attemptChromeStorage('remove', key, undefined, useLocal);\r\n    if (chromeResult.success) {\r\n      chromeSuccess = true;\r\n    } else {\r\n      errors.push(`Chrome storage: ${chromeResult.error}`);\r\n    }\r\n\r\n    // Remove from localStorage fallback\r\n    if (this.config.enableFallback) {\r\n      try {\r\n        const fallbackKey = this.config.fallbackPrefix + key;\r\n        localStorage.removeItem(fallbackKey);\r\n        fallbackSuccess = true;\r\n        \r\n        if (this.config.debugMode) {\r\n          console.log(`\u2705 Successfully removed from localStorage: ${fallbackKey}`);\r\n        }\r\n      } catch (fallbackError) {\r\n        errors.push(`LocalStorage: ${fallbackError}`);\r\n      }\r\n    }\r\n\r\n    // Consider successful if at least one method worked\r\n    if (chromeSuccess || fallbackSuccess) {\r\n      return { success: true };\r\n    }\r\n\r\n    return {\r\n      success: false,\r\n      error: `Failed to remove from all storage methods: ${errors.join(', ')}`\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clear all stored data\r\n   * \r\n   * WARNING: This removes ALL data from both Chrome storage and localStorage.\r\n   * Use with caution in production environments.\r\n   * \r\n   * @param useLocal - Target chrome.storage.local instead of sync\r\n   * @returns Promise<StorageResult<void>> - Result object with success status\r\n   */\r\n  async clear(useLocal: boolean = false): Promise<StorageResult<void>> {\r\n    if (this.config.debugMode) {\r\n      console.log('\uD83E\uDDF9 Clearing all storage data');\r\n    }\r\n\r\n    let chromeSuccess = false;\r\n    let fallbackSuccess = false;\r\n    let errors: string[] = [];\r\n\r\n    // Clear Chrome storage\r\n    try {\r\n      if (this.isExtensionContextValid()) {\r\n        const storage = useLocal ? chrome.storage.local : chrome.storage.sync;\r\n        await storage.clear();\r\n        chromeSuccess = true;\r\n        \r\n        if (this.config.debugMode) {\r\n          console.log('\u2705 Chrome storage cleared successfully');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      errors.push(`Chrome storage: ${error}`);\r\n    }\r\n\r\n    // Clear localStorage fallback items\r\n    if (this.config.enableFallback) {\r\n      try {\r\n        const keysToRemove: string[] = [];\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n          const key = localStorage.key(i);\r\n          if (key && key.startsWith(this.config.fallbackPrefix)) {\r\n            keysToRemove.push(key);\r\n          }\r\n        }\r\n        \r\n        keysToRemove.forEach(key => localStorage.removeItem(key));\r\n        fallbackSuccess = true;\r\n        \r\n        if (this.config.debugMode) {\r\n          console.log(`\u2705 Cleared ${keysToRemove.length} localStorage fallback items`);\r\n        }\r\n      } catch (fallbackError) {\r\n        errors.push(`LocalStorage: ${fallbackError}`);\r\n      }\r\n    }\r\n\r\n    if (chromeSuccess || fallbackSuccess) {\r\n      return { success: true };\r\n    }\r\n\r\n    return {\r\n      success: false,\r\n      error: `Failed to clear storage: ${errors.join(', ')}`\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Save multiple key-value pairs in a single batch operation\r\n   * \r\n   * More efficient than multiple individual save operations.\r\n   * Maintains transactional semantics - if any save fails, reports detailed errors.\r\n   * \r\n   * @param data - Object containing key-value pairs to save\r\n   * @param useLocal - Force use of chrome.storage.local instead of sync\r\n   * @returns Promise<StorageResult<void>> - Result with success status and error details\r\n   */\r\n  async saveBatch(data: { [key: string]: any }, useLocal: boolean = false): Promise<StorageResult<void>> {\r\n    if (!data || typeof data !== 'object') {\r\n      return {\r\n        success: false,\r\n        error: 'Invalid data: must be object with key-value pairs'\r\n      };\r\n    }\r\n\r\n    const keys = Object.keys(data);\r\n    if (keys.length === 0) {\r\n      return {\r\n        success: true // Empty batch is technically successful\r\n      };\r\n    }\r\n\r\n    if (this.config.debugMode) {\r\n      console.log(`\uD83D\uDCE6 Batch saving ${keys.length} items:`, keys);\r\n    }\r\n\r\n    // Validate all data first if validation is enabled\r\n    if (this.config.validateData) {\r\n      const validationErrors: string[] = [];\r\n      for (const key of keys) {\r\n        if (this.schemas.has(key)) {\r\n          const validationResult = this.validateData(key, data[key]);\r\n          if (!validationResult.isValid) {\r\n            validationErrors.push(`${key}: ${validationResult.error}`);\r\n          }\r\n        }\r\n      }\r\n      \r\n      if (validationErrors.length > 0) {\r\n        return {\r\n          success: false,\r\n          error: `Batch validation failed: ${validationErrors.join(', ')}`\r\n        };\r\n      }\r\n    }\r\n\r\n    // Attempt batch Chrome storage operation\r\n    const chromeResult = await this.attemptChromeStorage('saveBatch', '', data, useLocal);\r\n    if (chromeResult.success) {\r\n      return chromeResult;\r\n    }\r\n\r\n    // Fallback to individual localStorage operations\r\n    if (this.config.enableFallback) {\r\n      if (this.config.debugMode) {\r\n        console.log('\uD83D\uDD04 Batch Chrome storage failed, using localStorage fallback');\r\n      }\r\n\r\n      const fallbackErrors: string[] = [];\r\n      let successCount = 0;\r\n\r\n      for (const [key, value] of Object.entries(data)) {\r\n        try {\r\n          const fallbackKey = this.config.fallbackPrefix + key;\r\n          const serialized = JSON.stringify(value);\r\n          localStorage.setItem(fallbackKey, serialized);\r\n          successCount++;\r\n        } catch (error) {\r\n          fallbackErrors.push(`${key}: ${error}`);\r\n        }\r\n      }\r\n\r\n      if (successCount === keys.length) {\r\n        if (this.config.debugMode) {\r\n          console.log(`\u2705 Batch localStorage fallback successful: ${successCount}/${keys.length} items`);\r\n        }\r\n        return {\r\n          success: true,\r\n          fromFallback: true\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: `Batch fallback partial failure: ${successCount}/${keys.length} succeeded. Errors: ${fallbackErrors.join(', ')}`,\r\n          fromFallback: true\r\n        };\r\n      }\r\n    }\r\n\r\n    return chromeResult;\r\n  }\r\n\r\n  /**\r\n   * Register a data validation schema for a specific key\r\n   * \r\n   * Enables automatic data validation for save/retrieve operations.\r\n   * Helps prevent data corruption and provides early error detection.\r\n   * \r\n   * EXAMPLE USAGE:\r\n   * storage.registerSchema('user_preferences', {\r\n   *   wpm: { type: 'number', required: true, validate: (v) => v >= 50 && v <= 800 },\r\n   *   theme: { type: 'string', required: false },\r\n   *   enabled: { type: 'boolean', required: true }\r\n   * });\r\n   * \r\n   * @param key - Storage key to validate\r\n   * @param schema - Validation schema definition\r\n   */\r\n  registerSchema(key: string, schema: DataSchema): void {\r\n    if (!key || typeof key !== 'string') {\r\n      throw new Error('Invalid key: must be non-empty string');\r\n    }\r\n\r\n    if (!schema || typeof schema !== 'object') {\r\n      throw new Error('Invalid schema: must be object');\r\n    }\r\n\r\n    this.schemas.set(key, schema);\r\n    \r\n    if (this.config.debugMode) {\r\n      console.log(`\uD83D\uDCCB Registered validation schema for key: ${key}`, schema);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if extension context is valid for Chrome storage operations\r\n   * \r\n   * CRITICAL RELIABILITY FEATURE: This prevents the \"Extension context invalidated\"\r\n   * errors that plagued the original complexity-reader extension.\r\n   * \r\n   * @returns boolean - True if Chrome APIs are available and functional\r\n   */\r\n  private isExtensionContextValid(): boolean {\r\n    try {\r\n      // Check if chrome object exists\r\n      if (typeof chrome === 'undefined') {\r\n        return false;\r\n      }\r\n\r\n      // Check if storage API is available\r\n      if (!chrome.storage || !chrome.storage.sync || !chrome.storage.local) {\r\n        return false;\r\n      }\r\n\r\n      // Check if runtime is available (context validity indicator)\r\n      if (!chrome.runtime || !chrome.runtime.id) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      // Any error during context check means context is invalid\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempt Chrome storage operation with retry logic\r\n   * \r\n   * Core reliability mechanism that handles transient failures with\r\n   * exponential backoff retry strategy.\r\n   * \r\n   * @param operation - Storage operation type\r\n   * @param key - Storage key\r\n   * @param data - Data for save operations\r\n   * @param useLocal - Use local storage instead of sync\r\n   * @returns Promise<StorageResult<T>> - Operation result\r\n   */\r\n  private async attemptChromeStorage<T>(\r\n    operation: 'save' | 'get' | 'remove' | 'saveBatch',\r\n    key: string,\r\n    data?: any,\r\n    useLocal: boolean = false\r\n  ): Promise<StorageResult<T>> {\r\n    let lastError: string = '';\r\n    \r\n    // Retry loop with exponential backoff\r\n    for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {\r\n      try {\r\n        // Check context validity before each attempt\r\n        if (!this.isExtensionContextValid()) {\r\n          lastError = 'Extension context is invalid - chrome.storage unavailable';\r\n          if (this.config.debugMode) {\r\n            console.warn(`\u26A0\uFE0F Attempt ${attempt + 1}: ${lastError}`);\r\n          }\r\n          \r\n          // No point in retrying context issues\r\n          break;\r\n        }\r\n\r\n        // Select storage API (sync vs local)\r\n        const storage = useLocal ? chrome.storage.local : chrome.storage.sync;\r\n\r\n        // Execute the requested operation\r\n        let result: any;\r\n        switch (operation) {\r\n          case 'save':\r\n            result = await storage.set({ [key]: data });\r\n            if (this.config.debugMode) {\r\n              console.log(`\u2705 Chrome storage save successful: ${key}`);\r\n            }\r\n            return { success: true, data, retryCount: attempt };\r\n\r\n          case 'get':\r\n            result = await storage.get([key]);\r\n            const retrievedData = result[key] as T;\r\n            if (this.config.debugMode) {\r\n              console.log(`\u2705 Chrome storage get successful: ${key}`, retrievedData);\r\n            }\r\n            return { success: true, data: retrievedData, retryCount: attempt };\r\n\r\n          case 'remove':\r\n            result = await storage.remove([key]);\r\n            if (this.config.debugMode) {\r\n              console.log(`\u2705 Chrome storage remove successful: ${key}`);\r\n            }\r\n            return { success: true, retryCount: attempt };\r\n\r\n          case 'saveBatch':\r\n            result = await storage.set(data);\r\n            if (this.config.debugMode) {\r\n              console.log(`\u2705 Chrome storage batch save successful`);\r\n            }\r\n            return { success: true, retryCount: attempt };\r\n\r\n          default:\r\n            return {\r\n              success: false,\r\n              error: `Unknown operation: ${operation}`\r\n            };\r\n        }\r\n\r\n      } catch (error) {\r\n        lastError = error instanceof Error ? error.message : String(error);\r\n        \r\n        if (this.config.debugMode) {\r\n          console.warn(`\u26A0\uFE0F Attempt ${attempt + 1} failed for ${operation}:${key}:`, lastError);\r\n        }\r\n\r\n        // Don't retry on final attempt\r\n        if (attempt < this.config.maxRetries) {\r\n          // Calculate delay with exponential backoff\r\n          const delay = this.config.useExponentialBackoff \r\n            ? this.config.retryDelayMs * Math.pow(2, attempt)\r\n            : this.config.retryDelayMs;\r\n          \r\n          await this.delay(delay);\r\n        }\r\n      }\r\n    }\r\n\r\n    // All attempts failed\r\n    return {\r\n      success: false,\r\n      error: lastError,\r\n      retryCount: this.config.maxRetries\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate data against registered schema\r\n   * \r\n   * @param key - Storage key\r\n   * @param data - Data to validate\r\n   * @returns Validation result with error details\r\n   */\r\n  private validateData(key: string, data: any): { isValid: boolean; error?: string } {\r\n    const schema = this.schemas.get(key);\r\n    if (!schema) {\r\n      return { isValid: true }; // No schema means no validation\r\n    }\r\n\r\n    // Check if data is object when schema expects object properties\r\n    if (typeof data !== 'object' || data === null) {\r\n      return {\r\n        isValid: false,\r\n        error: 'Data must be object for schema validation'\r\n      };\r\n    }\r\n\r\n    // Validate each schema property\r\n    for (const [property, rules] of Object.entries(schema)) {\r\n      const value = data[property];\r\n\r\n      // Check required properties\r\n      if (rules.required && (value === undefined || value === null)) {\r\n        return {\r\n          isValid: false,\r\n          error: `Required property missing: ${property}`\r\n        };\r\n      }\r\n\r\n      // Skip type checking if value is undefined/null and not required\r\n      if (value === undefined || value === null) {\r\n        continue;\r\n      }\r\n\r\n      // Type validation\r\n      const actualType = Array.isArray(value) ? 'array' : typeof value;\r\n      if (actualType !== rules.type) {\r\n        return {\r\n          isValid: false,\r\n          error: `Property ${property} must be ${rules.type}, got ${actualType}`\r\n        };\r\n      }\r\n\r\n      // Custom validation function\r\n      if (rules.validate && !rules.validate(value)) {\r\n        return {\r\n          isValid: false,\r\n          error: `Property ${property} failed custom validation`\r\n        };\r\n      }\r\n    }\r\n\r\n    return { isValid: true };\r\n  }\r\n\r\n  /**\r\n   * Utility method for adding delays in retry logic\r\n   * \r\n   * @param ms - Milliseconds to delay\r\n   * @returns Promise that resolves after delay\r\n   */\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /**\r\n   * Get current configuration\r\n   * \r\n   * @returns Current storage configuration\r\n   */\r\n  getConfig(): StorageConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  /**\r\n   * Update configuration at runtime\r\n   * \r\n   * @param newConfig - Partial configuration to merge\r\n   */\r\n  updateConfig(newConfig: Partial<StorageConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    \r\n    if (this.config.debugMode) {\r\n      console.log('\uD83D\uDD27 StorageManager configuration updated:', this.config);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get storage usage statistics (Chrome storage only)\r\n   * \r\n   * Useful for monitoring storage quota usage and debugging.\r\n   * \r\n   * @param useLocal - Check local storage instead of sync\r\n   * @returns Promise<StorageResult<object>> - Usage statistics or error\r\n   */\r\n  async getStorageStats(useLocal: boolean = false): Promise<StorageResult<{\r\n    bytesInUse: number;\r\n    quotaBytes: number;\r\n    percentUsed: number;\r\n  }>> {\r\n    try {\r\n      if (!this.isExtensionContextValid()) {\r\n        return {\r\n          success: false,\r\n          error: 'Extension context invalid - cannot check storage stats'\r\n        };\r\n      }\r\n\r\n      const storage = useLocal ? chrome.storage.local : chrome.storage.sync;\r\n      const bytesInUse = await storage.getBytesInUse();\r\n      const quotaBytes = storage.QUOTA_BYTES;\r\n      const percentUsed = Math.round((bytesInUse / quotaBytes) * 100);\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          bytesInUse,\r\n          quotaBytes,\r\n          percentUsed\r\n        }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: `Failed to get storage stats: ${error}`\r\n      };\r\n    }\r\n  }\r\n}", "/**\n * ReadWise Pro - Content Script\n * Built with WebRay-M modular architecture and enhanced reliability patterns\n */\n\nimport { TextAnalysisEngine, type AnalysisResult } from './modules/TextAnalysisEngine';\nimport { BlurModeManager, type BlurModeConfig, type BlurModeStats } from './modules/BlurModeManager';\nimport { ReadingSessionManager, type ReadingSession } from './modules/ReadingSessionManager';\nimport { StorageManager } from './modules/StorageManager';\n\nconsole.log('\uD83D\uDE80 ReadWise Pro - Content script loaded at:', new Date().toISOString());\nconsole.log('\uD83C\uDF10 Document ready state:', document.readyState);\nconsole.log('\uD83D\uDD17 Current URL:', window.location.href);\n\n// Initialize ReadWise modules\nlet textAnalysisEngine: TextAnalysisEngine;\nlet blurModeManager: BlurModeManager;\nlet sessionManager: ReadingSessionManager;\nlet storageManager: StorageManager;\nlet currentAnalysis: AnalysisResult | null = null;\nlet currentSession: ReadingSession | null = null;\n\n// Initialize all modules with WebRay-M patterns\nconsole.log('\uD83D\uDD27 Initializing ReadWise modules...');\n\n// Storage Manager - handles Chrome storage with fallback reliability\nstorageManager = new StorageManager({\n  debugMode: true, // Enable for development\n  enableFallback: true,\n  maxRetries: 3\n});\n\n// Register data validation schemas for type safety\nstorageManager.registerSchema('user_preferences', {\n  wpm: { type: 'number', required: true, validate: (v) => v >= 50 && v <= 800 },\n  theme: { type: 'string', required: false },\n  dailyGoal: { type: 'number', required: false, validate: (v) => v > 0 }\n});\n\n// Text Analysis Engine\ntextAnalysisEngine = new TextAnalysisEngine();\n\n// Reading Session Manager with event handlers\nsessionManager = new ReadingSessionManager(\n  { dailyWordGoal: 2000 }, // Default goals\n  {\n    onSessionStart: (session) => {\n      console.log('\uD83D\uDCCA Reading session started:', session.id);\n      currentSession = session;\n    },\n    onSessionEnd: (session, stats) => {\n      console.log('\uD83D\uDCCA Reading session ended:', session.id, stats);\n      currentSession = null;\n    },\n    onGoalAchieved: (goalType) => {\n      console.log('\uD83C\uDF89 Goal achieved:', goalType);\n      // Could trigger a celebration overlay here\n    }\n  },\n  storageManager\n);\n\n// Blur Mode Manager with comprehensive event handling\nblurModeManager = new BlurModeManager(\n  {\n    wpm: 225, // Default reading speed\n    highlightColor: '#4285f4',\n    progressIndicator: true,\n    keyboardControls: true,\n    autoScroll: true\n  },\n  {\n    onStart: () => {\n      console.log('\uD83C\uDFAF Blur mode started');\n      // Update session with blur mode usage\n      if (currentSession) {\n        sessionManager.updateSessionProgress({ blurModeUsed: true });\n      }\n    },\n    onWordRevealed: (wordIndex, word) => {\n      // Update session with reading progress\n      if (currentSession) {\n        sessionManager.updateSessionProgress({ \n          blurModeWords: wordIndex + 1,\n          completionRate: (wordIndex + 1) / (blurModeManager.getStats().totalWords || 1)\n        });\n      }\n    },\n    onComplete: (stats) => {\n      console.log('\u2705 Blur mode completed:', stats);\n      // Final session update\n      if (currentSession) {\n        sessionManager.updateSessionProgress({\n          blurModeWords: stats.wordsRevealed,\n          completionRate: 1.0\n        });\n      }\n    },\n    onStop: () => {\n      console.log('\u23F9\uFE0F Blur mode stopped');\n    }\n  }\n);\n\nconsole.log('\u2705 All ReadWise modules initialized successfully');\n\n// Simple fallback overlay system using vanilla DOM\nclass SimpleOverlayManager {\n  private overlays = new Map<string, HTMLElement>();\n  private nextZIndex = 10000;\n\n  createOverlay(config: any): HTMLElement {\n    console.log('\uD83D\uDCE6 Creating simple DOM overlay:', config.id);\n    \n    // Remove existing overlay\n    this.removeOverlay(config.id);\n    \n    // Create overlay element\n    const overlay = document.createElement('div');\n    overlay.id = `webray-overlay-${config.id}`;\n    overlay.style.cssText = `\n      position: fixed;\n      left: ${config.position?.x || 20}px;\n      top: ${config.position?.y || 20}px;\n      z-index: ${this.nextZIndex++};\n      background: #ffffff;\n      border: 1px solid #e0e0e0;\n      border-radius: 8px;\n      padding: 16px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      font-size: 14px;\n      max-width: 320px;\n      cursor: ${config.draggable ? 'move' : 'default'};\n    `;\n\n    // Add content based on type\n    if (config.type === 'debug') {\n      overlay.innerHTML = `\n        <div style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 12px;\">\n          <div style=\"width: 12px; height: 12px; background: #4caf50; border-radius: 50%;\"></div>\n          <strong>WebRay-M Debug (Sidebar)</strong>\n        </div>\n        <div style=\"font-size: 12px; color: #666;\">\n          Framework: WebRay-M v2.0<br>\n          Engine: Simple DOM<br>\n          Type: Sidebar Extension<br>\n          Page: ${document.title}\n        </div>\n        <button onclick=\"this.parentElement.remove()\" style=\"\n          margin-top: 8px; padding: 4px 8px; border: 1px solid #ddd; \n          background: #f5f5f5; border-radius: 4px; cursor: pointer;\n        \">Close</button>\n      `;\n    } else if (config.type === 'text') {\n      overlay.innerHTML = `\n        <div>${config.content || 'Text overlay'}</div>\n        <button onclick=\"this.parentElement.remove()\" style=\"\n          margin-top: 8px; padding: 4px 8px; border: 1px solid #ddd; \n          background: #f5f5f5; border-radius: 4px; cursor: pointer;\n        \">Close</button>\n      `;\n    } else if (config.type === 'sidebar') {\n      overlay.innerHTML = `\n        <div style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 12px;\">\n          <div style=\"width: 12px; height: 12px; background: #ff9800; border-radius: 50%;\"></div>\n          <strong>WebRay-M Sidebar Panel</strong>\n        </div>\n        <div style=\"font-size: 12px; color: #666; margin-bottom: 12px;\">\n          This is a sidebar-style overlay that can contain<br>\n          various tools and information panels.\n        </div>\n        <div style=\"display: flex; gap: 8px;\">\n          <button onclick=\"console.log('Sidebar action 1')\" style=\"\n            padding: 6px 12px; border: 1px solid #ddd; \n            background: #2196f3; color: white; border-radius: 4px; cursor: pointer;\n          \">Action 1</button>\n          <button onclick=\"console.log('Sidebar action 2')\" style=\"\n            padding: 6px 12px; border: 1px solid #ddd; \n            background: #4caf50; color: white; border-radius: 4px; cursor: pointer;\n          \">Action 2</button>\n        </div>\n        <button onclick=\"this.parentElement.remove()\" style=\"\n          margin-top: 8px; padding: 4px 8px; border: 1px solid #ddd; \n          background: #f5f5f5; border-radius: 4px; cursor: pointer; width: 100%;\n        \">Close Sidebar</button>\n      `;\n    }\n\n    // Add dragging if enabled\n    if (config.draggable) {\n      this.makeDraggable(overlay);\n    }\n\n    // Add to page\n    document.body.appendChild(overlay);\n    this.overlays.set(config.id, overlay);\n    \n    console.log('\u2705 Simple overlay created successfully');\n    return overlay;\n  }\n\n  private makeDraggable(element: HTMLElement) {\n    let isDragging = false;\n    let startX = 0;\n    let startY = 0;\n    let initialLeft = 0;\n    let initialTop = 0;\n\n    element.addEventListener('mousedown', (e) => {\n      isDragging = true;\n      startX = e.clientX;\n      startY = e.clientY;\n      const rect = element.getBoundingClientRect();\n      initialLeft = rect.left;\n      initialTop = rect.top;\n      element.style.opacity = '0.8';\n    });\n\n    document.addEventListener('mousemove', (e) => {\n      if (!isDragging) return;\n      const deltaX = e.clientX - startX;\n      const deltaY = e.clientY - startY;\n      element.style.left = (initialLeft + deltaX) + 'px';\n      element.style.top = (initialTop + deltaY) + 'px';\n    });\n\n    document.addEventListener('mouseup', () => {\n      if (isDragging) {\n        isDragging = false;\n        element.style.opacity = '1';\n      }\n    });\n  }\n\n  removeOverlay(id: string): boolean {\n    const overlay = this.overlays.get(id);\n    if (overlay && overlay.parentNode) {\n      overlay.parentNode.removeChild(overlay);\n      this.overlays.delete(id);\n      return true;\n    }\n    return false;\n  }\n}\n\n// Initialize overlay manager (use simple DOM for now)\nlet overlayManager: any = null;\n\nasync function initializeOverlaySystem() {\n  // For now, use simple overlay system to avoid import issues\n  console.log('\uD83D\uDCE6 Using simple DOM overlay system');\n  overlayManager = new SimpleOverlayManager();\n  return true;\n}\n\n// Initialize and set up message handling\n(async () => {\n  try {\n    await initializeOverlaySystem();\n    \n    // Ensure listener is only added once\n    if (!(window as any).hasWebRayContentListener) {\n      console.log('\uD83C\uDFAF Setting up message listener...');\n      \n      chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n        console.log('\uD83D\uDCE5 Content script received message:', request);\n        \n        // Handle ping for auto-injection detection (WebRay-M enhanced)\n        if (request.action === 'ping') {\n          sendResponse({ \n            success: true, \n            message: 'ReadWise Pro content script is active',\n            features: ['textAnalysis', 'blurMode', 'sessionTracking'],\n            timestamp: Date.now()\n          });\n          return true;\n        }\n\n        // Text analysis request\n        if (request.action === 'analyze_text') {\n          (async () => {\n            try {\n              console.log('\uD83D\uDCCA Starting text analysis...');\n              const analysis = await textAnalysisEngine.analyzeCurrentPage(request.readingSpeedWPM);\n              \n              if (analysis) {\n                currentAnalysis = analysis;\n                console.log('\u2705 Analysis completed:', analysis);\n                sendResponse({ success: true, analysis });\n              } else {\n                console.log('\u26A0\uFE0F Page not suitable for analysis');\n                sendResponse({ \n                  success: false, \n                  error: 'Page not suitable for text analysis' \n                });\n              }\n            } catch (error) {\n              console.error('\u274C Analysis failed:', error);\n              sendResponse({ \n                success: false, \n                error: error instanceof Error ? error.message : 'Analysis failed' \n              });\n            }\n          })();\n          return true;\n        }\n\n        // Get cached analysis\n        if (request.action === 'get_cached_analysis') {\n          sendResponse({\n            success: true,\n            analysis: currentAnalysis,\n            timestamp: currentAnalysis?.timestamp || null\n          });\n          return true;\n        }\n\n        // Update reading speed\n        if (request.action === 'update_reading_speed') {\n          try {\n            textAnalysisEngine.setReadingSpeed(request.wpm);\n            sendResponse({ success: true });\n          } catch (error) {\n            sendResponse({ \n              success: false, \n              error: error instanceof Error ? error.message : 'Failed to update reading speed' \n            });\n          }\n          return true;\n        }\n        \n        if (request.action === 'create_debug_overlay') {\n          try {\n            overlayManager.createOverlay({\n              id: request.overlayId,\n              type: 'debug',\n              position: request.position,\n              draggable: true\n            });\n            sendResponse({ success: true });\n          } catch (error) {\n            console.error('Debug overlay creation failed:', error);\n            sendResponse({ success: false, error: error instanceof Error ? error.message : String(error) });\n          }\n          return true;\n        }\n\n        if (request.action === 'create_text_overlay') {\n          try {\n            overlayManager.createOverlay({\n              id: request.overlayId,\n              type: 'text',\n              content: request.content,\n              position: request.position,\n              draggable: true\n            });\n            sendResponse({ success: true });\n          } catch (error) {\n            console.error('Text overlay creation failed:', error);\n            sendResponse({ success: false, error: error instanceof Error ? error.message : String(error) });\n          }\n          return true;\n        }\n\n        if (request.action === 'create_sidebar_overlay') {\n          try {\n            overlayManager.createOverlay({\n              id: request.overlayId,\n              type: 'sidebar',\n              position: request.position,\n              draggable: true\n            });\n            sendResponse({ success: true });\n          } catch (error) {\n            console.error('Sidebar overlay creation failed:', error);\n            sendResponse({ success: false, error: error instanceof Error ? error.message : String(error) });\n          }\n          return true;\n        }\n\n        // ===== BLUR MODE HANDLERS =====\n        \n        // Start blur mode\n        if (request.action === 'start_blur_mode') {\n          (async () => {\n            try {\n              console.log('\uD83C\uDFAF Starting blur mode...');\n              const success = await blurModeManager.startBlurMode();\n              \n              if (success) {\n                sendResponse({ success: true, message: 'Blur mode started successfully' });\n              } else {\n                sendResponse({ \n                  success: false, \n                  error: 'Failed to start blur mode - no suitable content found' \n                });\n              }\n            } catch (error) {\n              console.error('\u274C Blur mode start failed:', error);\n              sendResponse({ \n                success: false, \n                error: error instanceof Error ? error.message : 'Failed to start blur mode' \n              });\n            }\n          })();\n          return true;\n        }\n\n        // Stop blur mode\n        if (request.action === 'stop_blur_mode') {\n          try {\n            blurModeManager.stopBlurMode();\n            sendResponse({ success: true, message: 'Blur mode stopped' });\n          } catch (error) {\n            sendResponse({ \n              success: false, \n              error: error instanceof Error ? error.message : 'Failed to stop blur mode' \n            });\n          }\n          return true;\n        }\n\n        // Toggle blur mode pause/resume\n        if (request.action === 'toggle_blur_pause') {\n          try {\n            blurModeManager.togglePause();\n            const stats = blurModeManager.getStats();\n            sendResponse({ \n              success: true, \n              isPaused: stats.isPaused,\n              message: stats.isPaused ? 'Blur mode paused' : 'Blur mode resumed'\n            });\n          } catch (error) {\n            sendResponse({ \n              success: false, \n              error: error instanceof Error ? error.message : 'Failed to toggle blur mode' \n            });\n          }\n          return true;\n        }\n\n        // Adjust blur mode speed\n        if (request.action === 'adjust_blur_speed') {\n          try {\n            const newWPM = request.wpm || 225;\n            blurModeManager.adjustSpeed(newWPM);\n            sendResponse({ \n              success: true, \n              wpm: newWPM,\n              message: `Blur mode speed adjusted to ${newWPM} WPM` \n            });\n          } catch (error) {\n            sendResponse({ \n              success: false, \n              error: error instanceof Error ? error.message : 'Failed to adjust speed' \n            });\n          }\n          return true;\n        }\n\n        // Get blur mode status and stats\n        if (request.action === 'get_blur_status') {\n          try {\n            const stats = blurModeManager.getStats();\n            const config = blurModeManager.getConfig();\n            sendResponse({ \n              success: true, \n              stats,\n              config,\n              isActive: blurModeManager.isBlurModeActive()\n            });\n          } catch (error) {\n            sendResponse({ \n              success: false, \n              error: error instanceof Error ? error.message : 'Failed to get blur status' \n            });\n          }\n          return true;\n        }\n\n        // ===== SESSION MANAGEMENT HANDLERS =====\n\n        // Start reading session\n        if (request.action === 'start_reading_session') {\n          (async () => {\n            try {\n              console.log('\uD83D\uDCCA Starting reading session...');\n              const session = await sessionManager.startSession(\n                window.location.href,\n                document.title,\n                request.targetWPM || 225\n              );\n              \n              sendResponse({ \n                success: true, \n                session,\n                message: 'Reading session started successfully' \n              });\n            } catch (error) {\n              console.error('\u274C Session start failed:', error);\n              sendResponse({ \n                success: false, \n                error: error instanceof Error ? error.message : 'Failed to start session' \n              });\n            }\n          })();\n          return true;\n        }\n\n        // End reading session\n        if (request.action === 'end_reading_session') {\n          (async () => {\n            try {\n              const session = await sessionManager.endSession();\n              const stats = await sessionManager.calculateStatistics();\n              \n              sendResponse({ \n                success: true, \n                session,\n                stats,\n                message: 'Reading session ended successfully' \n              });\n            } catch (error) {\n              console.error('\u274C Session end failed:', error);\n              sendResponse({ \n                success: false, \n                error: error instanceof Error ? error.message : 'Failed to end session' \n              });\n            }\n          })();\n          return true;\n        }\n\n        // Get current session status\n        if (request.action === 'get_session_status') {\n          try {\n            const currentSession = sessionManager.getCurrentSession();\n            sendResponse({ \n              success: true, \n              session: currentSession,\n              hasActiveSession: !!currentSession\n            });\n          } catch (error) {\n            sendResponse({ \n              success: false, \n              error: error instanceof Error ? error.message : 'Failed to get session status' \n            });\n          }\n          return true;\n        }\n\n        // Get reading statistics\n        if (request.action === 'get_reading_stats') {\n          (async () => {\n            try {\n              const stats = await sessionManager.calculateStatistics();\n              const todayProgress = await sessionManager.getTodayProgress();\n              \n              sendResponse({ \n                success: true, \n                stats,\n                todayProgress\n              });\n            } catch (error) {\n              console.error('\u274C Stats retrieval failed:', error);\n              sendResponse({ \n                success: false, \n                error: error instanceof Error ? error.message : 'Failed to get statistics' \n              });\n            }\n          })();\n          return true;\n        }\n\n        // ===== STORAGE HANDLERS =====\n\n        // Save user preferences\n        if (request.action === 'save_preferences') {\n          (async () => {\n            try {\n              const result = await storageManager.save('user_preferences', request.preferences);\n              sendResponse({ \n                success: result.success, \n                fromFallback: result.fromFallback,\n                error: result.error \n              });\n            } catch (error) {\n              sendResponse({ \n                success: false, \n                error: error instanceof Error ? error.message : 'Failed to save preferences' \n              });\n            }\n          })();\n          return true;\n        }\n\n        // Load user preferences\n        if (request.action === 'load_preferences') {\n          (async () => {\n            try {\n              const result = await storageManager.get('user_preferences', {\n                wpm: 225,\n                theme: 'light',\n                dailyGoal: 2000\n              });\n              sendResponse({ \n                success: result.success,\n                preferences: result.data,\n                fromFallback: result.fromFallback,\n                error: result.error\n              });\n            } catch (error) {\n              sendResponse({ \n                success: false, \n                error: error instanceof Error ? error.message : 'Failed to load preferences' \n              });\n            }\n          })();\n          return true;\n        }\n\n        // ===== DEMO ACTION (Keep existing) =====\n        \n        if (request.action === 'demo_action') {\n          console.log('Content script received message:', request.data);\n          \n          const indicator = document.createElement('div');\n          indicator.textContent = `WebRay-M: ${request.data || 'Message received!'}`;\n          indicator.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: #4caf50;\n            color: white;\n            padding: 12px 16px;\n            border-radius: 6px;\n            z-index: 10000;\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            font-size: 14px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n          `;\n          \n          document.body.appendChild(indicator);\n          setTimeout(() => indicator.remove(), 3000);\n          \n          sendResponse({ success: true });\n          return true;\n        }\n      });\n\n      (window as any).hasWebRayContentListener = true;\n      console.log('\uD83C\uDFAF Message listener registered');\n      \n      // Test communication\n      setTimeout(() => {\n        console.log('\uD83E\uDDEA Testing content script communication...');\n        chrome.runtime.sendMessage({ action: 'content_script_ready' }, (response) => {\n          console.log('\uD83D\uDFE2 Content script communication test:', response);\n        });\n      }, 1000);\n    }\n\n    console.log('\u2705 Content script initialization completed');\n    \n  } catch (error) {\n    console.error('\u274C Content script initialization failed:', error);\n  }\n})();"],
  "mappings": "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",
  "names": ["ColemanLiauAnalyzer", "text", "words", "sentences", "characters", "L", "S", "index", "word", "sentence", "alphanumeric", "ContentExtractor", "contentContainer", "title", "selector", "elements", "element", "tagName", "className", "role", "allElements", "textLength", "titleSources", "getTitle", "PageSuitabilityDetector", "url", "hostname", "pathname", "unsuitableHost", "pattern", "wordCount", "paragraphCount", "TextAnalysisEngine", "readingSpeedWPM", "colemanLiauIndex", "complexityScore", "readabilityLevel", "s", "averageSentenceLength", "averageCharactersPerWord", "adjustedWPM", "readingTimeMinutes", "result", "wpm", "BlurModeManager", "config", "events", "targetElement", "wordCount", "error", "stats", "wpm", "timeElapsed", "actualWPM", "selectors", "selector", "element", "allDivs", "bestCandidate", "maxTextLength", "div", "textContent", "walker", "node", "parent", "tagName", "text", "textNodes", "wordIndex", "textNode", "words", "part", "fragment", "i", "word", "wordSpan", "intervalMs", "prevWord", "currentWord", "index", "newConfig", "ReadingSessionManager", "goals", "events", "storageManager", "url", "title", "targetWPM", "sessionId", "endTime", "stats", "completedSession", "update", "sessions", "today", "thisWeek", "totalSessions", "totalWordsRead", "sum", "session", "totalTimeSpent", "completedSessions", "s", "averageWPM", "averageSessionLength", "blurModeSessions", "blurModeUsage", "complexityCount", "favoriteComplexity", "a", "b", "currentStreak", "longestStreak", "todayWords", "dailyGoalProgress", "weeklyStats", "monthlyStats", "todaySessions", "wordsRead", "timeSpent", "goalMet", "newGoals", "existingIndex", "error", "uniqueDates", "tempStreak", "yesterday", "i", "checkDate", "prevDate", "todayProgress", "isNewRecord", "weekDates", "date", "daySessions", "thisMonth", "monthSessions", "totalWords", "totalTime", "timestamp", "dates", "startOfWeek", "data", "StorageManager", "config", "key", "data", "useLocal", "validationResult", "chromeResult", "fallbackKey", "serialized", "fallbackError", "defaultValue", "stored", "parsed", "chromeSuccess", "fallbackSuccess", "errors", "error", "keysToRemove", "i", "keys", "validationErrors", "fallbackErrors", "successCount", "value", "schema", "operation", "lastError", "attempt", "storage", "result", "retrievedData", "delay", "property", "rules", "actualType", "ms", "resolve", "newConfig", "bytesInUse", "quotaBytes", "percentUsed", "textAnalysisEngine", "blurModeManager", "sessionManager", "storageManager", "currentAnalysis", "currentSession", "StorageManager", "v", "TextAnalysisEngine", "ReadingSessionManager", "session", "stats", "goalType", "BlurModeManager", "wordIndex", "word", "SimpleOverlayManager", "config", "overlay", "element", "isDragging", "startX", "startY", "initialLeft", "initialTop", "e", "rect", "deltaX", "deltaY", "id", "overlayManager", "initializeOverlaySystem", "request", "sender", "sendResponse", "analysis", "error", "success", "newWPM", "todayProgress", "result", "indicator", "response"]
}
