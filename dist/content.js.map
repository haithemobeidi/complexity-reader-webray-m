{
  "version": 3,
  "sources": ["../src/modules/TextAnalysisEngine.ts", "../src/content.ts"],
  "sourcesContent": ["/**\r\n * Text Analysis Engine Module\r\n * \r\n * Extracted from complexity-reader and refactored for WebRay-M modular architecture.\r\n * Handles Coleman-Liau Index calculation, content extraction, and page suitability detection.\r\n * \r\n * POTENTIAL WEBRAY-M MODULE CANDIDATE - High reuse potential for reading-focused extensions\r\n */\r\n\r\nexport interface AnalysisResult {\r\n  wordCount: number;\r\n  readingTime: number;\r\n  complexity: ComplexityMetrics;\r\n  url: string;\r\n  title: string;\r\n  timestamp: number;\r\n  textContent: string; // Full extracted text for blur mode\r\n}\r\n\r\nexport interface ComplexityMetrics {\r\n  averageSentenceLength: number;\r\n  averageCharactersPerWord: number; // Note: Coleman-Liau uses characters, not syllables\r\n  complexityScore: 'Simple' | 'Easy' | 'Moderate' | 'Complex' | 'Very Complex' | 'No text';\r\n  readabilityLevel: 'Elementary' | 'Middle School' | 'High School' | 'College' | 'Graduate' | 'N/A';\r\n  colemanLiauIndex: number; // Raw score for debugging\r\n}\r\n\r\n/**\r\n * Coleman-Liau Index Calculator\r\n * \r\n * Character-based readability formula optimized for web content.\r\n * More accurate than Flesch Reading Ease for online text with technical terms and URLs.\r\n */\r\nclass ColemanLiauAnalyzer {\r\n  /**\r\n   * Calculate Coleman-Liau Index\r\n   * Formula: 0.0588 * L - 0.296 * S - 15.8\r\n   * Where L = average characters per 100 words, S = average sentences per 100 words\r\n   */\r\n  calculateIndex(text: string): number {\r\n    const words = this.countWords(text);\r\n    const sentences = this.countSentences(text);\r\n    const characters = this.countCharacters(text);\r\n\r\n    if (words === 0 || sentences === 0) return 0;\r\n\r\n    const L = (characters / words) * 100; // Average characters per 100 words\r\n    const S = (sentences / words) * 100;  // Average sentences per 100 words\r\n    \r\n    const index = 0.0588 * L - 0.296 * S - 15.8;\r\n    return Math.round(index * 10) / 10; // Round to 1 decimal place\r\n  }\r\n\r\n  /**\r\n   * Get complexity classification from Coleman-Liau Index\r\n   */\r\n  getComplexityClassification(index: number): ComplexityMetrics['complexityScore'] {\r\n    if (index <= 6) return 'Simple';\r\n    if (index <= 9) return 'Easy';\r\n    if (index <= 12) return 'Moderate';\r\n    if (index <= 15) return 'Complex';\r\n    return 'Very Complex';\r\n  }\r\n\r\n  /**\r\n   * Get readability level from Coleman-Liau Index\r\n   */\r\n  getReadabilityLevel(index: number): ComplexityMetrics['readabilityLevel'] {\r\n    if (index <= 6) return 'Elementary';\r\n    if (index <= 9) return 'Middle School';\r\n    if (index <= 12) return 'High School';\r\n    if (index <= 15) return 'College';\r\n    return 'Graduate';\r\n  }\r\n\r\n  private countWords(text: string): number {\r\n    // Split by whitespace and filter out empty strings\r\n    const words = text.trim().split(/\\s+/).filter(word => word.length > 0);\r\n    return words.length;\r\n  }\r\n\r\n  private countSentences(text: string): number {\r\n    // Enhanced sentence detection for web content\r\n    // Split by sentence endings, filter out very short segments\r\n    const sentences = text.split(/[.!?]+/).filter(sentence => {\r\n      const trimmed = sentence.trim();\r\n      return trimmed.length > 10; // Minimum meaningful sentence length\r\n    });\r\n    \r\n    return Math.max(1, sentences.length); // Ensure at least 1 sentence\r\n  }\r\n\r\n  private countCharacters(text: string): number {\r\n    // Count only alphanumeric characters (Coleman-Liau standard)\r\n    const alphanumeric = text.match(/[a-zA-Z0-9]/g);\r\n    return alphanumeric ? alphanumeric.length : 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Content Extractor\r\n * \r\n * Intelligently extracts main content from web pages using semantic selectors.\r\n * Prioritizes article content over navigation, ads, and other page elements.\r\n */\r\nclass ContentExtractor {\r\n  private contentSelectors = [\r\n    { selector: 'main', priority: 10 },\r\n    { selector: 'article', priority: 9 },\r\n    { selector: '[role=\"main\"]', priority: 8 },\r\n    // Article-specific selectors\r\n    { selector: '.content', priority: 7 },\r\n    { selector: '.post-content', priority: 7 },\r\n    { selector: '.entry-content', priority: 7 },\r\n    { selector: '.article-content', priority: 7 },\r\n    { selector: '.text-content', priority: 6 },\r\n    { selector: '.main-content', priority: 6 },\r\n    // Generic selectors\r\n    { selector: '#content', priority: 5 },\r\n    { selector: '.container', priority: 3 },\r\n    // Fallback\r\n    { selector: 'body', priority: 1 }\r\n  ];\r\n\r\n  /**\r\n   * Extract main content from current page\r\n   */\r\n  extractMainContent(): { text: string; title: string; element: Element | null } {\r\n    const contentContainer = this.findBestContentContainer();\r\n    \r\n    if (!contentContainer) {\r\n      return {\r\n        text: '',\r\n        title: document.title || 'Untitled',\r\n        element: null\r\n      };\r\n    }\r\n\r\n    const text = this.extractAndCleanText(contentContainer);\r\n    const title = this.extractTitle();\r\n\r\n    return {\r\n      text,\r\n      title,\r\n      element: contentContainer\r\n    };\r\n  }\r\n\r\n  private findBestContentContainer(): Element | null {\r\n    // Try selectors in priority order\r\n    for (const { selector } of this.contentSelectors) {\r\n      const elements = document.querySelectorAll(selector);\r\n      \r\n      for (const element of elements) {\r\n        if (this.isGoodContentContainer(element)) {\r\n          console.log(`\uD83D\uDCDD Using content container: ${selector}`);\r\n          return element;\r\n        }\r\n      }\r\n    }\r\n\r\n    console.warn('\u26A0\uFE0F No suitable content container found, using body');\r\n    return document.body;\r\n  }\r\n\r\n  private isGoodContentContainer(element: Element): boolean {\r\n    const text = element.textContent || '';\r\n    const wordCount = text.trim().split(/\\s+/).length;\r\n    \r\n    // Quality checks\r\n    return (\r\n      wordCount >= 50 && // Minimum content requirement\r\n      !this.isNavigationElement(element) &&\r\n      !this.isFooterElement(element) &&\r\n      this.hasGoodTextDensity(element)\r\n    );\r\n  }\r\n\r\n  private isNavigationElement(element: Element): boolean {\r\n    const tagName = element.tagName.toLowerCase();\r\n    const className = element.className.toLowerCase();\r\n    const role = element.getAttribute('role') || '';\r\n    \r\n    return (\r\n      tagName === 'nav' ||\r\n      role === 'navigation' ||\r\n      className.includes('nav') ||\r\n      className.includes('menu') ||\r\n      className.includes('sidebar')\r\n    );\r\n  }\r\n\r\n  private isFooterElement(element: Element): boolean {\r\n    const tagName = element.tagName.toLowerCase();\r\n    const className = element.className.toLowerCase();\r\n    \r\n    return (\r\n      tagName === 'footer' ||\r\n      className.includes('footer')\r\n    );\r\n  }\r\n\r\n  private hasGoodTextDensity(element: Element): boolean {\r\n    const allElements = element.querySelectorAll('*').length;\r\n    const textLength = (element.textContent || '').length;\r\n    \r\n    // Good text-to-element ratio indicates article content vs UI elements\r\n    return allElements === 0 || (textLength / allElements) > 10;\r\n  }\r\n\r\n  private extractAndCleanText(element: Element): string {\r\n    let text = element.textContent || '';\r\n    \r\n    // Clean and normalize text\r\n    text = text\r\n      .replace(/\\s+/g, ' ')        // Normalize whitespace\r\n      .replace(/\\n+/g, ' ')        // Convert newlines to spaces\r\n      .replace(/\\t+/g, ' ')        // Convert tabs to spaces\r\n      .trim();\r\n    \r\n    return text;\r\n  }\r\n\r\n  private extractTitle(): string {\r\n    // Try multiple title sources in priority order\r\n    const titleSources = [\r\n      () => document.querySelector('h1')?.textContent,\r\n      () => document.querySelector('[role=\"heading\"][aria-level=\"1\"]')?.textContent,\r\n      () => document.querySelector('.article-title')?.textContent,\r\n      () => document.querySelector('.post-title')?.textContent,\r\n      () => document.querySelector('.entry-title')?.textContent,\r\n      () => document.title\r\n    ];\r\n\r\n    for (const getTitle of titleSources) {\r\n      const title = getTitle()?.trim();\r\n      if (title && title.length > 0) {\r\n        return title;\r\n      }\r\n    }\r\n\r\n    return 'Untitled';\r\n  }\r\n}\r\n\r\n/**\r\n * Page Suitability Detector\r\n * \r\n * Determines if a page is suitable for text analysis.\r\n * Filters out video sites, social media, admin panels, etc.\r\n */\r\nclass PageSuitabilityDetector {\r\n  private unsuitableHostnames = [\r\n    // Video and media sites\r\n    'youtube.com', 'www.youtube.com', 'm.youtube.com', 'youtu.be',\r\n    'vimeo.com', 'dailymotion.com', 'twitch.tv', 'www.twitch.tv',\r\n    'netflix.com', 'hulu.com', 'disney.com',\r\n    'spotify.com', 'soundcloud.com', 'bandcamp.com',\r\n    // Social media\r\n    'facebook.com', 'www.facebook.com', 'm.facebook.com',\r\n    'twitter.com', 'x.com', 'linkedin.com',\r\n    'instagram.com', 'tiktok.com', 'snapchat.com',\r\n    'reddit.com', 'www.reddit.com',\r\n    // Chat and communication\r\n    'discord.com', 'slack.com', 'teams.microsoft.com',\r\n    'whatsapp.com', 'telegram.org', 'signal.org'\r\n  ];\r\n\r\n  private unsuitablePatterns = [\r\n    '/admin', '/dashboard', '/wp-admin', '/wp-login',\r\n    '/login', '/signin', '/signup', '/register',\r\n    '/checkout', '/cart', '/payment', '/billing'\r\n  ];\r\n\r\n  /**\r\n   * Check if current page is suitable for text analysis\r\n   */\r\n  isPageSuitable(): boolean {\r\n    const url = window.location.href.toLowerCase();\r\n    const hostname = window.location.hostname.toLowerCase();\r\n    const pathname = window.location.pathname.toLowerCase();\r\n    \r\n    // Skip extension pages\r\n    if (url.startsWith('chrome-extension://') || \r\n        url.startsWith('moz-extension://') || \r\n        url.startsWith('ms-browser-extension://')) {\r\n      console.log('\uD83D\uDEAB Skipping analysis - extension page detected');\r\n      return false;\r\n    }\r\n\r\n    // Check hostname blacklist\r\n    for (const unsuitableHost of this.unsuitableHostnames) {\r\n      if (hostname.includes(unsuitableHost)) {\r\n        console.log(`\uD83D\uDEAB Skipping analysis - unsuitable site: ${unsuitableHost}`);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Check pathname patterns\r\n    for (const pattern of this.unsuitablePatterns) {\r\n      if (pathname.includes(pattern)) {\r\n        console.log(`\uD83D\uDEAB Skipping analysis - unsuitable page: ${pattern}`);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Check for minimum content requirements\r\n    if (!this.hasMinimumContent()) {\r\n      console.log('\uD83D\uDEAB Skipping analysis - insufficient content');\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private hasMinimumContent(): boolean {\r\n    const bodyText = document.body.textContent || '';\r\n    const wordCount = bodyText.trim().split(/\\s+/).length;\r\n    const paragraphCount = document.querySelectorAll('p').length;\r\n    \r\n    return wordCount >= 100 && paragraphCount >= 2;\r\n  }\r\n}\r\n\r\n/**\r\n * Main Text Analysis Engine\r\n * \r\n * Orchestrates all analysis components to provide comprehensive text analysis.\r\n * This is the main class that other modules interact with.\r\n */\r\nexport class TextAnalysisEngine {\r\n  private colemanLiau = new ColemanLiauAnalyzer();\r\n  private extractor = new ContentExtractor();\r\n  private suitabilityDetector = new PageSuitabilityDetector();\r\n  \r\n  // Configuration\r\n  private baseReadingSpeedWPM = 225; // Average adult reading speed\r\n\r\n  /**\r\n   * Perform comprehensive text analysis on current page\r\n   */\r\n  async analyzeCurrentPage(readingSpeedWPM: number = this.baseReadingSpeedWPM): Promise<AnalysisResult | null> {\r\n    console.log('\uD83D\uDCCA Starting text analysis...');\r\n\r\n    // Check page suitability\r\n    if (!this.suitabilityDetector.isPageSuitable()) {\r\n      console.log('\uD83D\uDEAB Page not suitable for analysis');\r\n      return null;\r\n    }\r\n\r\n    // Extract content\r\n    const { text, title, element } = this.extractor.extractMainContent();\r\n    \r\n    if (!text || text.length < 100) {\r\n      console.log('\uD83D\uDEAB Insufficient text content for analysis');\r\n      return null;\r\n    }\r\n\r\n    // Perform Coleman-Liau analysis\r\n    const colemanLiauIndex = this.colemanLiau.calculateIndex(text);\r\n    const complexityScore = this.colemanLiau.getComplexityClassification(colemanLiauIndex);\r\n    const readabilityLevel = this.colemanLiau.getReadabilityLevel(colemanLiauIndex);\r\n\r\n    // Calculate additional metrics\r\n    const wordCount = text.trim().split(/\\s+/).length;\r\n    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0).length;\r\n    const characters = (text.match(/[a-zA-Z0-9]/g) || []).length;\r\n    \r\n    const averageSentenceLength = Math.round((wordCount / Math.max(1, sentences)) * 10) / 10;\r\n    const averageCharactersPerWord = Math.round((characters / wordCount) * 10) / 10;\r\n\r\n    // Calculate reading time with complexity adjustment\r\n    let adjustedWPM = readingSpeedWPM;\r\n    if (colemanLiauIndex > 15) adjustedWPM *= 0.8;  // Very complex: 20% slower\r\n    else if (colemanLiauIndex > 12) adjustedWPM *= 0.9;  // Complex: 10% slower\r\n    else if (colemanLiauIndex < 6) adjustedWPM *= 1.1;   // Simple: 10% faster\r\n    \r\n    const readingTimeMinutes = Math.ceil(wordCount / adjustedWPM);\r\n\r\n    const result: AnalysisResult = {\r\n      wordCount,\r\n      readingTime: readingTimeMinutes,\r\n      complexity: {\r\n        averageSentenceLength,\r\n        averageCharactersPerWord,\r\n        complexityScore,\r\n        readabilityLevel,\r\n        colemanLiauIndex\r\n      },\r\n      url: window.location.href,\r\n      title,\r\n      timestamp: Date.now(),\r\n      textContent: text // Store for blur mode\r\n    };\r\n\r\n    console.log('\u2705 Analysis complete:', result);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Get the main content element for blur mode\r\n   */\r\n  getMainContentElement(): Element | null {\r\n    const { element } = this.extractor.extractMainContent();\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Update reading speed for calculations\r\n   */\r\n  setReadingSpeed(wpm: number): void {\r\n    this.baseReadingSpeedWPM = wpm;\r\n    console.log(`\uD83D\uDCD6 Reading speed updated to ${wpm} WPM`);\r\n  }\r\n}", "/**\n * ReadWise Pro - Content Script\n * Built with WebRay-M modular architecture and enhanced reliability patterns\n */\n\nimport { TextAnalysisEngine, type AnalysisResult } from './modules/TextAnalysisEngine';\n\nconsole.log('\uD83D\uDE80 ReadWise Pro - Content script loaded at:', new Date().toISOString());\nconsole.log('\uD83C\uDF10 Document ready state:', document.readyState);\nconsole.log('\uD83D\uDD17 Current URL:', window.location.href);\n\n// Initialize ReadWise modules\nlet textAnalysisEngine: TextAnalysisEngine;\nlet currentAnalysis: AnalysisResult | null = null;\n\n// Initialize text analysis engine\nconsole.log('\uD83D\uDD27 Initializing ReadWise modules...');\ntextAnalysisEngine = new TextAnalysisEngine();\nconsole.log('\u2705 TextAnalysisEngine initialized');\n\n// Simple fallback overlay system using vanilla DOM\nclass SimpleOverlayManager {\n  private overlays = new Map<string, HTMLElement>();\n  private nextZIndex = 10000;\n\n  createOverlay(config: any): HTMLElement {\n    console.log('\uD83D\uDCE6 Creating simple DOM overlay:', config.id);\n    \n    // Remove existing overlay\n    this.removeOverlay(config.id);\n    \n    // Create overlay element\n    const overlay = document.createElement('div');\n    overlay.id = `webray-overlay-${config.id}`;\n    overlay.style.cssText = `\n      position: fixed;\n      left: ${config.position?.x || 20}px;\n      top: ${config.position?.y || 20}px;\n      z-index: ${this.nextZIndex++};\n      background: #ffffff;\n      border: 1px solid #e0e0e0;\n      border-radius: 8px;\n      padding: 16px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      font-size: 14px;\n      max-width: 320px;\n      cursor: ${config.draggable ? 'move' : 'default'};\n    `;\n\n    // Add content based on type\n    if (config.type === 'debug') {\n      overlay.innerHTML = `\n        <div style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 12px;\">\n          <div style=\"width: 12px; height: 12px; background: #4caf50; border-radius: 50%;\"></div>\n          <strong>WebRay-M Debug (Sidebar)</strong>\n        </div>\n        <div style=\"font-size: 12px; color: #666;\">\n          Framework: WebRay-M v2.0<br>\n          Engine: Simple DOM<br>\n          Type: Sidebar Extension<br>\n          Page: ${document.title}\n        </div>\n        <button onclick=\"this.parentElement.remove()\" style=\"\n          margin-top: 8px; padding: 4px 8px; border: 1px solid #ddd; \n          background: #f5f5f5; border-radius: 4px; cursor: pointer;\n        \">Close</button>\n      `;\n    } else if (config.type === 'text') {\n      overlay.innerHTML = `\n        <div>${config.content || 'Text overlay'}</div>\n        <button onclick=\"this.parentElement.remove()\" style=\"\n          margin-top: 8px; padding: 4px 8px; border: 1px solid #ddd; \n          background: #f5f5f5; border-radius: 4px; cursor: pointer;\n        \">Close</button>\n      `;\n    } else if (config.type === 'sidebar') {\n      overlay.innerHTML = `\n        <div style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 12px;\">\n          <div style=\"width: 12px; height: 12px; background: #ff9800; border-radius: 50%;\"></div>\n          <strong>WebRay-M Sidebar Panel</strong>\n        </div>\n        <div style=\"font-size: 12px; color: #666; margin-bottom: 12px;\">\n          This is a sidebar-style overlay that can contain<br>\n          various tools and information panels.\n        </div>\n        <div style=\"display: flex; gap: 8px;\">\n          <button onclick=\"console.log('Sidebar action 1')\" style=\"\n            padding: 6px 12px; border: 1px solid #ddd; \n            background: #2196f3; color: white; border-radius: 4px; cursor: pointer;\n          \">Action 1</button>\n          <button onclick=\"console.log('Sidebar action 2')\" style=\"\n            padding: 6px 12px; border: 1px solid #ddd; \n            background: #4caf50; color: white; border-radius: 4px; cursor: pointer;\n          \">Action 2</button>\n        </div>\n        <button onclick=\"this.parentElement.remove()\" style=\"\n          margin-top: 8px; padding: 4px 8px; border: 1px solid #ddd; \n          background: #f5f5f5; border-radius: 4px; cursor: pointer; width: 100%;\n        \">Close Sidebar</button>\n      `;\n    }\n\n    // Add dragging if enabled\n    if (config.draggable) {\n      this.makeDraggable(overlay);\n    }\n\n    // Add to page\n    document.body.appendChild(overlay);\n    this.overlays.set(config.id, overlay);\n    \n    console.log('\u2705 Simple overlay created successfully');\n    return overlay;\n  }\n\n  private makeDraggable(element: HTMLElement) {\n    let isDragging = false;\n    let startX = 0;\n    let startY = 0;\n    let initialLeft = 0;\n    let initialTop = 0;\n\n    element.addEventListener('mousedown', (e) => {\n      isDragging = true;\n      startX = e.clientX;\n      startY = e.clientY;\n      const rect = element.getBoundingClientRect();\n      initialLeft = rect.left;\n      initialTop = rect.top;\n      element.style.opacity = '0.8';\n    });\n\n    document.addEventListener('mousemove', (e) => {\n      if (!isDragging) return;\n      const deltaX = e.clientX - startX;\n      const deltaY = e.clientY - startY;\n      element.style.left = (initialLeft + deltaX) + 'px';\n      element.style.top = (initialTop + deltaY) + 'px';\n    });\n\n    document.addEventListener('mouseup', () => {\n      if (isDragging) {\n        isDragging = false;\n        element.style.opacity = '1';\n      }\n    });\n  }\n\n  removeOverlay(id: string): boolean {\n    const overlay = this.overlays.get(id);\n    if (overlay && overlay.parentNode) {\n      overlay.parentNode.removeChild(overlay);\n      this.overlays.delete(id);\n      return true;\n    }\n    return false;\n  }\n}\n\n// Initialize overlay manager (use simple DOM for now)\nlet overlayManager: any = null;\n\nasync function initializeOverlaySystem() {\n  // For now, use simple overlay system to avoid import issues\n  console.log('\uD83D\uDCE6 Using simple DOM overlay system');\n  overlayManager = new SimpleOverlayManager();\n  return true;\n}\n\n// Initialize and set up message handling\n(async () => {\n  try {\n    await initializeOverlaySystem();\n    \n    // Ensure listener is only added once\n    if (!(window as any).hasWebRayContentListener) {\n      console.log('\uD83C\uDFAF Setting up message listener...');\n      \n      chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n        console.log('\uD83D\uDCE5 Content script received message:', request);\n        \n        // Handle ping for auto-injection detection (WebRay-M enhanced)\n        if (request.action === 'ping') {\n          sendResponse({ \n            success: true, \n            message: 'ReadWise Pro content script is active',\n            features: ['textAnalysis', 'blurMode', 'sessionTracking'],\n            timestamp: Date.now()\n          });\n          return true;\n        }\n\n        // Text analysis request\n        if (request.action === 'analyze_text') {\n          (async () => {\n            try {\n              console.log('\uD83D\uDCCA Starting text analysis...');\n              const analysis = await textAnalysisEngine.analyzeCurrentPage(request.readingSpeedWPM);\n              \n              if (analysis) {\n                currentAnalysis = analysis;\n                console.log('\u2705 Analysis completed:', analysis);\n                sendResponse({ success: true, analysis });\n              } else {\n                console.log('\u26A0\uFE0F Page not suitable for analysis');\n                sendResponse({ \n                  success: false, \n                  error: 'Page not suitable for text analysis' \n                });\n              }\n            } catch (error) {\n              console.error('\u274C Analysis failed:', error);\n              sendResponse({ \n                success: false, \n                error: error instanceof Error ? error.message : 'Analysis failed' \n              });\n            }\n          })();\n          return true;\n        }\n\n        // Get cached analysis\n        if (request.action === 'get_cached_analysis') {\n          sendResponse({\n            success: true,\n            analysis: currentAnalysis,\n            timestamp: currentAnalysis?.timestamp || null\n          });\n          return true;\n        }\n\n        // Update reading speed\n        if (request.action === 'update_reading_speed') {\n          try {\n            textAnalysisEngine.setReadingSpeed(request.wpm);\n            sendResponse({ success: true });\n          } catch (error) {\n            sendResponse({ \n              success: false, \n              error: error instanceof Error ? error.message : 'Failed to update reading speed' \n            });\n          }\n          return true;\n        }\n        \n        if (request.action === 'create_debug_overlay') {\n          try {\n            overlayManager.createOverlay({\n              id: request.overlayId,\n              type: 'debug',\n              position: request.position,\n              draggable: true\n            });\n            sendResponse({ success: true });\n          } catch (error) {\n            console.error('Debug overlay creation failed:', error);\n            sendResponse({ success: false, error: error instanceof Error ? error.message : String(error) });\n          }\n          return true;\n        }\n\n        if (request.action === 'create_text_overlay') {\n          try {\n            overlayManager.createOverlay({\n              id: request.overlayId,\n              type: 'text',\n              content: request.content,\n              position: request.position,\n              draggable: true\n            });\n            sendResponse({ success: true });\n          } catch (error) {\n            console.error('Text overlay creation failed:', error);\n            sendResponse({ success: false, error: error instanceof Error ? error.message : String(error) });\n          }\n          return true;\n        }\n\n        if (request.action === 'create_sidebar_overlay') {\n          try {\n            overlayManager.createOverlay({\n              id: request.overlayId,\n              type: 'sidebar',\n              position: request.position,\n              draggable: true\n            });\n            sendResponse({ success: true });\n          } catch (error) {\n            console.error('Sidebar overlay creation failed:', error);\n            sendResponse({ success: false, error: error instanceof Error ? error.message : String(error) });\n          }\n          return true;\n        }\n\n        if (request.action === 'demo_action') {\n          console.log('Content script received message:', request.data);\n          \n          const indicator = document.createElement('div');\n          indicator.textContent = `WebRay-M: ${request.data || 'Message received!'}`;\n          indicator.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: #4caf50;\n            color: white;\n            padding: 12px 16px;\n            border-radius: 6px;\n            z-index: 10000;\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            font-size: 14px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n          `;\n          \n          document.body.appendChild(indicator);\n          setTimeout(() => indicator.remove(), 3000);\n          \n          sendResponse({ success: true });\n          return true;\n        }\n      });\n\n      (window as any).hasWebRayContentListener = true;\n      console.log('\uD83C\uDFAF Message listener registered');\n      \n      // Test communication\n      setTimeout(() => {\n        console.log('\uD83E\uDDEA Testing content script communication...');\n        chrome.runtime.sendMessage({ action: 'content_script_ready' }, (response) => {\n          console.log('\uD83D\uDFE2 Content script communication test:', response);\n        });\n      }, 1000);\n    }\n\n    console.log('\u2705 Content script initialization completed');\n    \n  } catch (error) {\n    console.error('\u274C Content script initialization failed:', error);\n  }\n})();"],
  "mappings": "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",
  "names": ["ColemanLiauAnalyzer", "text", "words", "sentences", "characters", "L", "S", "index", "word", "sentence", "alphanumeric", "ContentExtractor", "contentContainer", "title", "selector", "elements", "element", "tagName", "className", "role", "allElements", "textLength", "titleSources", "getTitle", "PageSuitabilityDetector", "url", "hostname", "pathname", "unsuitableHost", "pattern", "wordCount", "paragraphCount", "TextAnalysisEngine", "readingSpeedWPM", "colemanLiauIndex", "complexityScore", "readabilityLevel", "s", "averageSentenceLength", "averageCharactersPerWord", "adjustedWPM", "readingTimeMinutes", "result", "wpm", "textAnalysisEngine", "currentAnalysis", "TextAnalysisEngine", "SimpleOverlayManager", "config", "overlay", "element", "isDragging", "startX", "startY", "initialLeft", "initialTop", "e", "rect", "deltaX", "deltaY", "id", "overlayManager", "initializeOverlaySystem", "request", "sender", "sendResponse", "analysis", "error", "indicator", "response"]
}
