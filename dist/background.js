(()=>{var l=class{constructor(r={}){this.defaultConfig={maxRetries:3,progressiveBackoff:!0,timeout:5e3,ensureContentScript:!0,contentScriptPath:"content.js",debugMode:!1};this.defaultConfig={...this.defaultConfig,...r}}async send(r,o={}){let e={...this.defaultConfig,...o},n=performance.now(),a,c=0,g=(await chrome.tabs.query({active:!0,currentWindow:!0}))[0];if(!g?.id)return this.createErrorResult("No active tab found",0,n);let m=g.id;for(let i=1;i<=e.maxRetries;i++){c=i;try{if(i>1&&e.progressiveBackoff){let b=100*Math.pow(2,i-2);await this.delay(b),e.debugMode&&console.log(`\u23F3 [ContentScriptBridge] Retry attempt ${i}/${e.maxRetries} after ${b}ms delay`)}let s=await this.sendMessageWithTimeout(m,r,e.timeout),p=performance.now();return e.debugMode&&console.log(`\u2705 [ContentScriptBridge] Success on attempt ${i}:`,s),{success:!0,data:s,retryCount:c,timing:{startTime:n,endTime:p,duration:p-n}}}catch(s){a=s,e.debugMode&&console.log(`\u274C [ContentScriptBridge] Attempt ${i}/${e.maxRetries} failed:`,s.message),this.isContentScriptMissingError(s.message)&&i<e.maxRetries&&e.ensureContentScript&&(e.debugMode&&console.log("\u{1F504} [ContentScriptBridge] Re-injecting content script..."),await this.injectContentScript(m,e.contentScriptPath,e.debugMode))}}return this.createErrorResult(`Content script communication failed after ${e.maxRetries} attempts: ${a?.message||"Unknown error"}`,c,n)}async ping(r={}){let o={timeout:1e3,debugMode:!1,...r};try{return(await this.send({action:"ping"},{maxRetries:1,timeout:o.timeout,ensureContentScript:!1,debugMode:o.debugMode})).success}catch{return!1}}sendMessageWithTimeout(r,o,e){return new Promise((n,a)=>{let c=setTimeout(()=>{a(new Error("Content script timeout"))},e);chrome.tabs.sendMessage(r,o,d=>{clearTimeout(c),chrome.runtime.lastError?a(new Error(chrome.runtime.lastError.message)):n(d)})})}async injectContentScript(r,o,e){try{await chrome.scripting.executeScript({target:{tabId:r},files:[o]}),await this.delay(100)}catch(n){throw e&&console.error("\u274C [ContentScriptBridge] Failed to inject:",n),n}}isContentScriptMissingError(r){return r.includes("Receiving end does not exist")||r.includes("Could not establish connection")}createErrorResult(r,o,e){let n=performance.now();return{success:!1,error:r,retryCount:o,timing:{startTime:e,endTime:n,duration:n-e}}}delay(r){return new Promise(o=>setTimeout(o,r))}},f=new l;console.log("\u{1F680} ReadWise Pro - Background script loaded");var u=new l({maxRetries:5,progressiveBackoff:!0,timeout:1e4,ensureContentScript:!0,debugMode:!0});chrome.runtime.onMessage.addListener((t,r,o)=>{if(console.log("\u{1F4E5} Background received message:",t.action),t.action==="analyze_page")return(async()=>{try{console.log("\u{1F504} Relaying analysis request with WebRay-M bridge...");let e=await u.send({action:"analyze_text",readingSpeedWPM:t.readingSpeedWPM||225});e.success?(console.log("\u2705 Analysis successful via bridge:",e.retryCount,"attempts"),o({success:!0,analysis:e.data.analysis,bridgeInfo:{retryCount:e.retryCount,duration:e.timing.duration}})):(console.error("\u274C Analysis failed via bridge:",e.error),o({success:!1,error:e.error,bridgeInfo:{retryCount:e.retryCount,duration:e.timing.duration}}))}catch(e){console.error("\u274C Bridge communication failed:",e),o({success:!1,error:e instanceof Error?e.message:"Communication failed"})}})(),!0;if(t.action==="get_cached_analysis")return(async()=>{try{let e=await u.send({action:"get_cached_analysis"});o({success:e.success,...e.success?e.data:{error:e.error}})}catch(e){o({success:!1,error:e instanceof Error?e.message:"Failed to get cached analysis"})}})(),!0;if(t.action==="fetch")return console.log("Background: Handling fetch request for:",t.url),fetch(t.url,t.options||{}).then(e=>e.json()).then(e=>{console.log("Background: Fetch successful:",e),o(e)}).catch(e=>{console.error("Background: Fetch error:",e),o({error:e.message})}),!0});chrome.commands.onCommand.addListener(async t=>{console.log("\u2328\uFE0F Keyboard command:",t);try{let[r]=await chrome.tabs.query({active:!0,currentWindow:!0});if(!r?.id)return;switch(t){case"toggle_sidebar":await chrome.sidePanel.open({tabId:r.id}),console.log("\u{1F4CB} Sidebar toggled");break;case"analyze_current_page":let o=await u.send({action:"analyze_text",readingSpeedWPM:225});if(o.success){let e=o.data.analysis?.complexity;e&&(await chrome.action.setBadgeText({text:e.complexityScore.charAt(0),tabId:r.id}),await chrome.action.setBadgeBackgroundColor({color:"#667eea"})),console.log("\u{1F4CA} Page analyzed via keyboard shortcut")}break;case"toggle_blur_mode":console.log("\u{1F441}\uFE0F Blur mode toggle - TODO: implement");break}}catch(r){console.error("\u274C Keyboard command failed:",r)}});chrome.runtime.onInstalled.addListener(async()=>{console.log("\u{1F4E6} ReadWise Pro installed");try{let[t]=await chrome.tabs.query({active:!0,currentWindow:!0});t?.id&&t.url&&!t.url.startsWith("chrome://")&&!t.url.startsWith("chrome-extension://")&&(console.log("\u{1F9EA} Testing WebRay-M bridge on install..."),(await u.send({action:"ping"},{timeout:3e3,debugMode:!0})).success?console.log("\u2705 WebRay-M bridge test successful on install"):console.log("\u26A0\uFE0F Bridge test failed, but auto-injection should handle it"))}catch(t){console.log("\u26A0\uFE0F Install test failed:",t.message)}});chrome.action.onClicked.addListener(async t=>{t.id&&await chrome.sidePanel.open({tabId:t.id})});chrome.tabs.onUpdated.addListener((t,r,o)=>{r.status==="complete"&&o.url&&console.log("Tab updated:",o.url)});chrome.tabs.onActivated.addListener(async t=>{try{let r=await chrome.tabs.get(t.tabId);if(!r.url||r.url.startsWith("chrome://")||r.url.startsWith("chrome-extension://"))return;try{await chrome.tabs.sendMessage(t.tabId,{action:"ping"}),console.log("\u{1F4CD} Content script already active on tab:",r.url)}catch(o){o.message.includes("Receiving end does not exist")&&(console.log("\u{1F504} Auto-injecting content script into active tab:",r.url),await chrome.scripting.executeScript({target:{tabId:t.tabId},files:["content.js"]}),console.log("\u2705 Content script auto-injected successfully"))}}catch(r){console.log("\u26A0\uFE0F Could not auto-inject into tab:",r.message)}});chrome.runtime.onInstalled.addListener(async()=>{console.log("WebRay-M Sidebar Example installed");try{let[t]=await chrome.tabs.query({active:!0,currentWindow:!0});t?.id&&t.url&&!t.url.startsWith("chrome://")&&!t.url.startsWith("chrome-extension://")&&(console.log("\u{1F504} Auto-injecting content script into current tab on install:",t.url),await chrome.scripting.executeScript({target:{tabId:t.id},files:["content.js"]}),console.log("\u2705 Content script injected on install"))}catch(t){console.log("\u26A0\uFE0F Could not inject into current tab on install:",t.message)}});})();
//# sourceMappingURL=background.js.map
