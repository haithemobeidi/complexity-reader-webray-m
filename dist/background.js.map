{
  "version": 3,
  "sources": ["../src/webray-m/core/utils/ContentScriptBridge.ts", "../src/background.ts"],
  "sourcesContent": ["/**\r\n * Enhanced Content Script Communication Bridge\r\n * Based on DesignSnap patterns adapted for WebRay-M skeleton\r\n * \r\n * Provides reliable content script communication with:\r\n * - Automatic retry logic with progressive backoff\r\n * - Content script auto-injection when missing\r\n * - Timeout handling and graceful degradation\r\n * - Zero configuration - just works out of the box\r\n */\r\n\r\ninterface ContentScriptOptions {\r\n  maxRetries?: number;           // Default: 3\r\n  progressiveBackoff?: boolean;  // Default: true\r\n  timeout?: number;              // Default: 5000ms\r\n  ensureContentScript?: boolean; // Default: true\r\n  contentScriptPath?: string;    // Default: 'content.js'\r\n  debugMode?: boolean;           // Default: false\r\n}\r\n\r\ninterface ContentScriptResult<T = any> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: string;\r\n  retryCount: number;\r\n  timing: {\r\n    startTime: number;\r\n    endTime: number;\r\n    duration: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Enhanced Content Script Bridge for reliable Chrome extension communication\r\n * \r\n * Usage:\r\n * ```typescript\r\n * import { ContentScriptBridge } from '@webray-m/core';\r\n * \r\n * const bridge = new ContentScriptBridge();\r\n * const result = await bridge.send({ action: 'extractData' });\r\n * if (result.success) {\r\n *   console.log('Data:', result.data);\r\n * }\r\n * ```\r\n */\r\nexport class ContentScriptBridge {\r\n  private defaultConfig: Required<ContentScriptOptions> = {\r\n    maxRetries: 3,\r\n    progressiveBackoff: true,\r\n    timeout: 5000,\r\n    ensureContentScript: true,\r\n    contentScriptPath: 'content.js',\r\n    debugMode: false\r\n  };\r\n\r\n  constructor(config: ContentScriptOptions = {}) {\r\n    this.defaultConfig = { ...this.defaultConfig, ...config };\r\n  }\r\n\r\n  /**\r\n   * Send message to content script with automatic retry and recovery\r\n   */\r\n  async send<T = any>(\r\n    message: any,\r\n    options: ContentScriptOptions = {}\r\n  ): Promise<ContentScriptResult<T>> {\r\n    const config = { ...this.defaultConfig, ...options };\r\n    const startTime = performance.now();\r\n    let lastError: Error | undefined;\r\n    let retryCount = 0;\r\n\r\n    // Get current active tab\r\n    const tabs = await chrome.tabs.query({ active: true, currentWindow: true });\r\n    const currentTab = tabs[0];\r\n    \r\n    if (!currentTab?.id) {\r\n      return this.createErrorResult('No active tab found', 0, startTime);\r\n    }\r\n\r\n    const tabId = currentTab.id;\r\n\r\n    for (let attempt = 1; attempt <= config.maxRetries; attempt++) {\r\n      retryCount = attempt;\r\n      \r\n      try {\r\n        // Progressive backoff delay (except first attempt)\r\n        if (attempt > 1 && config.progressiveBackoff) {\r\n          const delay = 100 * Math.pow(2, attempt - 2); // 100ms, 200ms, 400ms\r\n          await this.delay(delay);\r\n          \r\n          if (config.debugMode) {\r\n            console.log(`\u23F3 [ContentScriptBridge] Retry attempt ${attempt}/${config.maxRetries} after ${delay}ms delay`);\r\n          }\r\n        }\r\n\r\n        // Send message with timeout\r\n        const result = await this.sendMessageWithTimeout(tabId, message, config.timeout);\r\n\r\n        // Success!\r\n        const endTime = performance.now();\r\n        \r\n        if (config.debugMode) {\r\n          console.log(`\u2705 [ContentScriptBridge] Success on attempt ${attempt}:`, result);\r\n        }\r\n\r\n        return {\r\n          success: true,\r\n          data: result,\r\n          retryCount,\r\n          timing: {\r\n            startTime,\r\n            endTime,\r\n            duration: endTime - startTime\r\n          }\r\n        };\r\n\r\n      } catch (error) {\r\n        lastError = error as Error;\r\n        \r\n        if (config.debugMode) {\r\n          console.log(`\u274C [ContentScriptBridge] Attempt ${attempt}/${config.maxRetries} failed:`, (error as Error).message);\r\n        }\r\n\r\n        // If content script error and not last attempt, try to re-inject\r\n        if (this.isContentScriptMissingError((error as Error).message) && \r\n            attempt < config.maxRetries && \r\n            config.ensureContentScript) {\r\n          \r\n          if (config.debugMode) {\r\n            console.log('\uD83D\uDD04 [ContentScriptBridge] Re-injecting content script...');\r\n          }\r\n          \r\n          await this.injectContentScript(tabId, config.contentScriptPath, config.debugMode);\r\n        }\r\n      }\r\n    }\r\n\r\n    // All attempts failed\r\n    return this.createErrorResult(\r\n      `Content script communication failed after ${config.maxRetries} attempts: ${lastError?.message || 'Unknown error'}`,\r\n      retryCount,\r\n      startTime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Test if content script is ready by sending a ping\r\n   */\r\n  async ping(options: Pick<ContentScriptOptions, 'timeout' | 'debugMode'> = {}): Promise<boolean> {\r\n    const config = {\r\n      timeout: 1000,\r\n      debugMode: false,\r\n      ...options\r\n    };\r\n\r\n    try {\r\n      const result = await this.send(\r\n        { action: 'ping' },\r\n        { \r\n          maxRetries: 1, \r\n          timeout: config.timeout,\r\n          ensureContentScript: false, // Don't inject for ping test\r\n          debugMode: config.debugMode \r\n        }\r\n      );\r\n      \r\n      return result.success;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send message with timeout handling\r\n   */\r\n  private sendMessageWithTimeout(tabId: number, message: any, timeout: number): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      // Create timeout promise\r\n      const timeoutPromise = setTimeout(() => {\r\n        reject(new Error('Content script timeout'));\r\n      }, timeout);\r\n\r\n      // Send message\r\n      chrome.tabs.sendMessage(tabId, message, (response) => {\r\n        clearTimeout(timeoutPromise);\r\n        \r\n        if (chrome.runtime.lastError) {\r\n          reject(new Error(chrome.runtime.lastError.message));\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Inject content script into tab\r\n   */\r\n  private async injectContentScript(tabId: number, scriptPath: string, debugMode: boolean): Promise<void> {\r\n    try {\r\n      await chrome.scripting.executeScript({\r\n        target: { tabId },\r\n        files: [scriptPath]\r\n      });\r\n      \r\n      // Small delay to let content script initialize\r\n      await this.delay(100);\r\n      \r\n    } catch (injectionError) {\r\n      if (debugMode) {\r\n        console.error('\u274C [ContentScriptBridge] Failed to inject:', injectionError);\r\n      }\r\n      throw injectionError;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if error indicates missing content script\r\n   */\r\n  private isContentScriptMissingError(errorMessage: string): boolean {\r\n    return errorMessage.includes('Receiving end does not exist') ||\r\n           errorMessage.includes('Could not establish connection');\r\n  }\r\n\r\n  /**\r\n   * Create standardized error result\r\n   */\r\n  private createErrorResult<T>(error: string, retryCount: number, startTime: number): ContentScriptResult<T> {\r\n    const endTime = performance.now();\r\n    return {\r\n      success: false,\r\n      error,\r\n      retryCount,\r\n      timing: {\r\n        startTime,\r\n        endTime,\r\n        duration: endTime - startTime\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Promise-based delay utility\r\n   */\r\n  private delay(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n}\r\n\r\n/**\r\n * Default instance for simple usage\r\n */\r\nexport const contentScriptBridge = new ContentScriptBridge();\r\n\r\n/**\r\n * Convenience function for quick usage\r\n */\r\nexport const sendToContentScript = <T = any>(\r\n  message: any, \r\n  options?: ContentScriptOptions\r\n): Promise<ContentScriptResult<T>> => {\r\n  return contentScriptBridge.send<T>(message, options);\r\n};\r\n\r\n/**\r\n * Convenience function for ping testing\r\n */\r\nexport const pingContentScript = (\r\n  options?: Pick<ContentScriptOptions, 'timeout' | 'debugMode'>\r\n): Promise<boolean> => {\r\n  return contentScriptBridge.ping(options);\r\n};", "/**\n * ReadWise Pro - Background Script\n * Built with WebRay-M ContentScriptBridge for enhanced reliability\n */\n\n// Enhanced WebRay-M ContentScriptBridge with retry logic and auto-injection\nimport { ContentScriptBridge } from './webray-m/core/utils/ContentScriptBridge';\n\nconsole.log('\uD83D\uDE80 ReadWise Pro - Background script loaded');\n\n// Initialize WebRay-M ContentScriptBridge with enhanced reliability\nconst contentBridge = new ContentScriptBridge({\n  maxRetries: 5,\n  progressiveBackoff: true,\n  timeout: 10000,\n  ensureContentScript: true,\n  debugMode: true\n});\n\n// Enhanced message routing with ContentScriptBridge\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  console.log('\uD83D\uDCE5 Background received message:', request.action);\n  \n  // Handle text analysis requests with enhanced reliability\n  if (request.action === 'analyze_page') {\n    (async () => {\n      try {\n        console.log('\uD83D\uDD04 Relaying analysis request with WebRay-M bridge...');\n        \n        const result = await contentBridge.send({\n          action: 'analyze_text',\n          readingSpeedWPM: request.readingSpeedWPM || 225\n        });\n        \n        if (result.success) {\n          console.log('\u2705 Analysis successful via bridge:', result.retryCount, 'attempts');\n          sendResponse({ \n            success: true, \n            analysis: result.data.analysis,\n            bridgeInfo: {\n              retryCount: result.retryCount,\n              duration: result.timing.duration\n            }\n          });\n        } else {\n          console.error('\u274C Analysis failed via bridge:', result.error);\n          sendResponse({ \n            success: false, \n            error: result.error,\n            bridgeInfo: {\n              retryCount: result.retryCount,\n              duration: result.timing.duration\n            }\n          });\n        }\n      } catch (error) {\n        console.error('\u274C Bridge communication failed:', error);\n        sendResponse({ \n          success: false, \n          error: error instanceof Error ? error.message : 'Communication failed' \n        });\n      }\n    })();\n    return true;\n  }\n\n  // Get cached analysis\n  if (request.action === 'get_cached_analysis') {\n    (async () => {\n      try {\n        const result = await contentBridge.send({\n          action: 'get_cached_analysis'\n        });\n        \n        sendResponse({\n          success: result.success,\n          ...(result.success ? result.data : { error: result.error })\n        });\n      } catch (error) {\n        sendResponse({ \n          success: false, \n          error: error instanceof Error ? error.message : 'Failed to get cached analysis' \n        });\n      }\n    })();\n    return true;\n  }\n\n  // Blur mode controls from sidebar\n  if (request.action === 'start_blur_mode') {\n    (async () => {\n      try {\n        const result = await contentBridge.send({\n          action: 'start_blur_mode'\n        });\n        \n        sendResponse({\n          success: result.success,\n          ...(result.success ? result.data : { error: result.error })\n        });\n      } catch (error) {\n        sendResponse({ \n          success: false, \n          error: error instanceof Error ? error.message : 'Failed to start blur mode' \n        });\n      }\n    })();\n    return true;\n  }\n\n  if (request.action === 'stop_blur_mode') {\n    (async () => {\n      try {\n        const result = await contentBridge.send({\n          action: 'stop_blur_mode'\n        });\n        \n        sendResponse({\n          success: result.success,\n          ...(result.success ? result.data : { error: result.error })\n        });\n      } catch (error) {\n        sendResponse({ \n          success: false, \n          error: error instanceof Error ? error.message : 'Failed to stop blur mode' \n        });\n      }\n    })();\n    return true;\n  }\n\n  if (request.action === 'get_blur_status') {\n    (async () => {\n      try {\n        const result = await contentBridge.send({\n          action: 'get_blur_status'\n        });\n        \n        sendResponse({\n          success: result.success,\n          ...(result.success ? result.data : { error: result.error })\n        });\n      } catch (error) {\n        sendResponse({ \n          success: false, \n          error: error instanceof Error ? error.message : 'Failed to get blur status' \n        });\n      }\n    })();\n    return true;\n  }\n\n  if (request.action === 'adjust_blur_speed') {\n    (async () => {\n      try {\n        const result = await contentBridge.send({\n          action: 'adjust_blur_speed',\n          wpm: request.wpm\n        });\n        \n        sendResponse({\n          success: result.success,\n          ...(result.success ? result.data : { error: result.error })\n        });\n      } catch (error) {\n        sendResponse({ \n          success: false, \n          error: error instanceof Error ? error.message : 'Failed to adjust blur speed' \n        });\n      }\n    })();\n    return true;\n  }\n\n  if (request.action === 'toggle_blur_pause') {\n    (async () => {\n      try {\n        const result = await contentBridge.send({\n          action: 'toggle_blur_pause'\n        });\n        \n        sendResponse({\n          success: result.success,\n          ...(result.success ? result.data : { error: result.error })\n        });\n      } catch (error) {\n        sendResponse({ \n          success: false, \n          error: error instanceof Error ? error.message : 'Failed to toggle blur pause' \n        });\n      }\n    })();\n    return true;\n  }\n\n  // Session management from sidebar\n  if (request.action === 'start_reading_session') {\n    (async () => {\n      try {\n        const result = await contentBridge.send({\n          action: 'start_reading_session',\n          targetWPM: request.targetWPM || 225\n        });\n        \n        sendResponse({\n          success: result.success,\n          ...(result.success ? result.data : { error: result.error })\n        });\n      } catch (error) {\n        sendResponse({ \n          success: false, \n          error: error instanceof Error ? error.message : 'Failed to start session' \n        });\n      }\n    })();\n    return true;\n  }\n\n  if (request.action === 'end_reading_session') {\n    (async () => {\n      try {\n        const result = await contentBridge.send({\n          action: 'end_reading_session'\n        });\n        \n        sendResponse({\n          success: result.success,\n          ...(result.success ? result.data : { error: result.error })\n        });\n      } catch (error) {\n        sendResponse({ \n          success: false, \n          error: error instanceof Error ? error.message : 'Failed to end session' \n        });\n      }\n    })();\n    return true;\n  }\n\n  if (request.action === 'get_session_status') {\n    (async () => {\n      try {\n        const result = await contentBridge.send({\n          action: 'get_session_status'\n        });\n        \n        sendResponse({\n          success: result.success,\n          ...(result.success ? result.data : { error: result.error })\n        });\n      } catch (error) {\n        sendResponse({ \n          success: false, \n          error: error instanceof Error ? error.message : 'Failed to get session status' \n        });\n      }\n    })();\n    return true;\n  }\n\n  if (request.action === 'update_session_progress') {\n    (async () => {\n      try {\n        const result = await contentBridge.send({\n          action: 'update_session_progress',\n          update: request.update\n        });\n        \n        sendResponse({\n          success: result.success,\n          ...(result.success ? result.data : { error: result.error })\n        });\n      } catch (error) {\n        sendResponse({ \n          success: false, \n          error: error instanceof Error ? error.message : 'Failed to update session progress' \n        });\n      }\n    })();\n    return true;\n  }\n\n  // CORS bypass fetch handler (preserved from WebRay-M)\n  if (request.action === 'fetch') {\n    console.log('Background: Handling fetch request for:', request.url);\n    \n    fetch(request.url, request.options || {})\n      .then(response => response.json())\n      .then(data => {\n        console.log('Background: Fetch successful:', data);\n        sendResponse(data);\n      })\n      .catch(error => {\n        console.error('Background: Fetch error:', error);\n        sendResponse({ error: error.message });\n      });\n    \n    return true;\n  }\n});\n\n// Keyboard command handlers\nchrome.commands.onCommand.addListener(async (command) => {\n  console.log('\u2328\uFE0F Keyboard command:', command);\n  \n  try {\n    const [activeTab] = await chrome.tabs.query({ active: true, currentWindow: true });\n    if (!activeTab?.id) return;\n    \n    switch (command) {\n      case 'toggle_sidebar':\n        await chrome.sidePanel.open({ tabId: activeTab.id });\n        console.log('\uD83D\uDCCB Sidebar toggled');\n        break;\n        \n      case 'analyze_current_page':\n        const analysisResult = await contentBridge.send({\n          action: 'analyze_text',\n          readingSpeedWPM: 225\n        });\n        \n        if (analysisResult.success) {\n          // Show badge with complexity level\n          const complexity = analysisResult.data.analysis?.complexity;\n          if (complexity) {\n            await chrome.action.setBadgeText({\n              text: complexity.complexityScore.charAt(0), // First letter of complexity level\n              tabId: activeTab.id\n            });\n            await chrome.action.setBadgeBackgroundColor({ color: '#667eea' });\n          }\n          console.log('\uD83D\uDCCA Page analyzed via keyboard shortcut');\n        }\n        break;\n        \n      case 'toggle_blur_mode':\n        // Get current blur mode status\n        const statusResult = await contentBridge.send({\n          action: 'get_blur_status'\n        });\n        \n        if (statusResult.success && statusResult.data.success) {\n          const isActive = statusResult.data.isActive;\n          \n          if (isActive) {\n            // Stop blur mode\n            const stopResult = await contentBridge.send({\n              action: 'stop_blur_mode'\n            });\n            \n            if (stopResult.success) {\n              await chrome.action.setBadgeText({ text: '', tabId: activeTab.id });\n              console.log('\uD83D\uDC41\uFE0F Blur mode stopped via keyboard shortcut');\n            }\n          } else {\n            // Start blur mode\n            const startResult = await contentBridge.send({\n              action: 'start_blur_mode'\n            });\n            \n            if (startResult.success) {\n              await chrome.action.setBadgeText({ text: 'B', tabId: activeTab.id });\n              await chrome.action.setBadgeBackgroundColor({ color: '#4285f4' });\n              console.log('\uD83D\uDC41\uFE0F Blur mode started via keyboard shortcut');\n            }\n          }\n        }\n        break;\n    }\n  } catch (error) {\n    console.error('\u274C Keyboard command failed:', error);\n  }\n});\n\n// Extension installation handler\nchrome.runtime.onInstalled.addListener(async () => {\n  console.log('\uD83D\uDCE6 ReadWise Pro installed');\n  \n  try {\n    // Test WebRay-M bridge on install\n    const [activeTab] = await chrome.tabs.query({ active: true, currentWindow: true });\n    \n    if (activeTab?.id && activeTab.url && \n        !activeTab.url.startsWith('chrome://') && \n        !activeTab.url.startsWith('chrome-extension://')) {\n      \n      console.log('\uD83E\uDDEA Testing WebRay-M bridge on install...');\n      \n      const pingResult = await contentBridge.send({ action: 'ping' }, { timeout: 3000, debugMode: true });\n      \n      if (pingResult.success) {\n        console.log('\u2705 WebRay-M bridge test successful on install');\n      } else {\n        console.log('\u26A0\uFE0F Bridge test failed, but auto-injection should handle it');\n      }\n    }\n  } catch (error) {\n    console.log('\u26A0\uFE0F Install test failed:', error.message);\n  }\n});\n\n// Handle extension icon click to open sidebar\nchrome.action.onClicked.addListener(async (tab) => {\n  if (tab.id) {\n    await chrome.sidePanel.open({ tabId: tab.id });\n  }\n});\n\n// Tab update handler for side panel\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n  if (changeInfo.status === 'complete' && tab.url) {\n    console.log('Tab updated:', tab.url);\n  }\n});\n\n// Auto-inject content script when user switches to a tab (only active tab)\nchrome.tabs.onActivated.addListener(async (activeInfo) => {\n  try {\n    const tab = await chrome.tabs.get(activeInfo.tabId);\n    \n    // Skip chrome:// and extension pages\n    if (!tab.url || tab.url.startsWith('chrome://') || tab.url.startsWith('chrome-extension://')) {\n      return;\n    }\n    \n    // Check if content script already exists\n    try {\n      await chrome.tabs.sendMessage(activeInfo.tabId, { action: 'ping' });\n      console.log('\uD83D\uDCCD Content script already active on tab:', tab.url);\n    } catch (error) {\n      if (error.message.includes('Receiving end does not exist')) {\n        // Content script not found, inject it\n        console.log('\uD83D\uDD04 Auto-injecting content script into active tab:', tab.url);\n        \n        await chrome.scripting.executeScript({\n          target: { tabId: activeInfo.tabId },\n          files: ['content.js']\n        });\n        \n        console.log('\u2705 Content script auto-injected successfully');\n      }\n    }\n  } catch (error) {\n    console.log('\u26A0\uFE0F Could not auto-inject into tab:', error.message);\n  }\n});\n\n// Also inject on extension install/update for the current active tab\nchrome.runtime.onInstalled.addListener(async () => {\n  console.log('WebRay-M Sidebar Example installed');\n  \n  try {\n    // Get the currently active tab\n    const [activeTab] = await chrome.tabs.query({ active: true, currentWindow: true });\n    \n    if (activeTab?.id && activeTab.url && \n        !activeTab.url.startsWith('chrome://') && \n        !activeTab.url.startsWith('chrome-extension://')) {\n      \n      console.log('\uD83D\uDD04 Auto-injecting content script into current tab on install:', activeTab.url);\n      \n      await chrome.scripting.executeScript({\n        target: { tabId: activeTab.id },\n        files: ['content.js']\n      });\n      \n      console.log('\u2705 Content script injected on install');\n    }\n  } catch (error) {\n    console.log('\u26A0\uFE0F Could not inject into current tab on install:', error.message);\n  }\n});"],
  "mappings": "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",
  "names": ["ContentScriptBridge", "config", "message", "options", "startTime", "lastError", "retryCount", "currentTab", "tabId", "attempt", "delay", "result", "endTime", "error", "timeout", "resolve", "reject", "timeoutPromise", "response", "scriptPath", "debugMode", "injectionError", "errorMessage", "ms", "contentScriptBridge", "contentBridge", "ContentScriptBridge", "request", "sender", "sendResponse", "result", "error", "response", "data", "command", "activeTab", "analysisResult", "complexity", "statusResult", "tab", "tabId", "changeInfo", "activeInfo"]
}
